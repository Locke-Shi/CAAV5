// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CATUniversalServices.h
// Header definition of CATUniversalServices
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2015  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#ifndef CATUniversalServices_H
#define CATUniversalServices_H

#include "WinhoUniversalServices.h"
#include "CATBaseUnknown.h"

#include "CATListOfCATUnicodeString.h"
#include "CATUnicodeString.h"
#include "CATDlgEditor.h"
#include "CATDlgMultiList.h"
#include "CATLISTV_CATISpecObject.h"
#include "CATISpecObject.h"


#include <string>
using std::string;
//-----------------------------------------------------------------------

/**
* Class representing xxx.
*
* <br><b>Role</b>: Provide the basic class function...
* <p>
* Do not use the @href CATUniversalServices constructor to
* do such and such but instead...
*
* @example
*  // example is optional
*  pObject = new CATUniversalServices;
*  pObject->SetXXX(...);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class ExportedByWinhoUniversalServices CATUniversalServices: public CATBaseUnknown
{
  CATDeclareClass;

  public:

	  // Standard constructors and destructors
	  // -------------------------------------
		 CATUniversalServices ();
		 virtual ~CATUniversalServices ();

	  // Copy constructor and equal operator
	  // -----------------------------------
	  CATUniversalServices (CATUniversalServices &);
	  CATUniversalServices& operator=(CATUniversalServices&);

	  static void SendMessage(CATUnicodeString istrMessage,
								CATUnicodeString istrTitle = CATUnicodeString("提示"));

	  static int SendUserOperaMessage(CATUnicodeString istrMessage,
										CATUnicodeString istrTitle = CATUnicodeString("提示"));

	  static int SendUserOperaMessageWithOKCancel(CATUnicodeString istrMessage,
												  CATUnicodeString istrTitle = CATUnicodeString("提示"));

	  static int SendUserOperaMessageWithYesNo(CATUnicodeString istrMessage,
											   CATUnicodeString istrTitle = CATUnicodeString("提示"));

	  static void SeparateStringBySymbol(CATUnicodeString istrString,
										  CATUnicodeString istrSymbol,
										  CATLISTV(CATUnicodeString) &ostrValueList); 

	  static LPCWSTR stringTOLPCWSTR(std::string orig);

	  static HRESULT RetrieveConfigFolderPath(CATUnicodeString istrConfigFolderName,
											  CATUnicodeString &ostrConfigFolderPath,
											  CATUnicodeString &ostrErrorInfo = CATUnicodeString(""),
											  CATUnicodeString istrEnvAttrName = CATUnicodeString("CATDefaultCollectionStandard"),
											  CATUnicodeString istrSeparateSymbol = CATUnicodeString(";"));

	  static HRESULT RetrieveConfigParamValue(CATUnicodeString istrConfigFilePath,
											  CATUnicodeString istrConfigParamName,
											  CATUnicodeString &ostrConfigParamValue,
											  CATUnicodeString &ostrErrorInfo);

	  static HRESULT RetrieveConfigParamValues(CATUnicodeString istrConfigFilePath,
												  CATLISTV(CATUnicodeString) istrConfigParamNameList,
												  CATLISTV(CATUnicodeString) &ostrConfigParamValueList,
												  CATUnicodeString &ostrErrorInfo);

	  static HRESULT RetrieveEnvAttrValueFromEnvTxt(CATUnicodeString istrEnvAttrName,
													  CATLISTV(CATUnicodeString) &ostrValueList,
													  CATUnicodeString &ostrErrorInfo = CATUnicodeString(""),
													  CATUnicodeString istrSeparateSymbol = CATUnicodeString(";"));

	  static HRESULT InsertStringToMousepointerInCATDlgEditor(CATDlgEditor * ipDlgEditor,
																CATUnicodeString istrString);

	  static void SwapLineContentInDlgMultiList(CATDlgMultiList * ipMultiList,
											    int iiFirLineIndex,
											    int iiSecLineIndex);

	  static CATBoolean IsEqual(CATBaseUnknown_var ispBU1,
								CATBaseUnknown_var ispBU2);

	  static CATBoolean IsImplEqual(CATBaseUnknown_var ispBU1,
								    CATBaseUnknown_var ispBU2);

	  static HRESULT CATCreateDirectory(CATUnicodeString istrDirectory);

	  static void UnsetRepeatedCommand();

	  static CATUnicodeString RetrieveCurtSysTime();

	  //判断输入对象是否已经存在于输入的List对象中，不存在返回0，存在返回其在List中的位置
	  static int HasObjInList(CATISpecObject_var ispObject,
							  CATLISTV(CATISpecObject_var) ispObjList);

	  static HRESULT RetrieveCurrentWindowName(CATUnicodeString &ostrWindowsName);
	  static HRESULT SetCurrentWindowName(CATUnicodeString istrWindowsName);
	  static HRESULT SetCurrentWindowByName(CATUnicodeString istrWindowsName);

	  static CATUnicodeString CreateGUID();

	  static HRESULT RetrieveContentFromText(CATUnicodeString istrTxtPath,
										     CATUnicodeString &ostrContent);

	  static HRESULT RetrieveLocalIP(CATUnicodeString &ostrIP);

	  //操作程序运行日志
	  static HRESULT CreateRunLog(CATUnicodeString istrLogFilePath = CATUnicodeString(""));
	  static HRESULT WriteRunLogInfo(CATUnicodeString istrRunInfo);
	  static HRESULT CloseRunLog();

	  static CATUnicodeString DoubleToString(double idNumber);
	  static CATUnicodeString IntToString(int iiNumber);

  private:

	  static FILE * _pLogFile;

};

//-----------------------------------------------------------------------

#endif
