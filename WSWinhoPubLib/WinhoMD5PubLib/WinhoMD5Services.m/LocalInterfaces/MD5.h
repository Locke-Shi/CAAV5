// COPYRIGHT Dassault Systemes 2016
//===================================================================
//
// MD5.h
// Header definition of MD5
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2016  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#ifndef MD5_H
#define MD5_H



#include "CATBaseUnknown.h"

//#include "stdafx.h"
#include<iostream>
#include <string>
#include <stdio.h>
#include <stdlib.h>


using namespace std;

//-----------------------------------------------------------------------

/**
* Class representing xxx.
*
* <br><b>Role</b>: Provide the basic class function...
* <p>
* Do not use the @href MD5 constructor to
* do such and such but instead...
*
* @example
*  // example is optional
*  pObject = new MD5;
*  pObject->SetXXX(...);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class MD5: public CATBaseUnknown
{
  CATDeclareClass;

  public:

	  // Standard constructors and destructors
	  // -------------------------------------
      MD5 ();
      virtual ~MD5 ();

	  // Copy constructor and equal operator
	  // -----------------------------------
	  MD5 (MD5 &);
	  MD5& operator=(MD5&);

	  //! construct a MD5 from any buffer
	  void GenerateMD5(unsigned char* buffer,int bufferlen);

	  //! construct a md5src from char *
	  MD5(const char * md5src);

	  //! construct a MD5 from a 16 bytes md5
	  MD5(unsigned long* md5src);

	  //! add a other md5
	  MD5 operator +(MD5 adder);

	  //! just if equal
	  bool operator ==(MD5 cmper);

	  //! to a string
	  char* ToString();

	  unsigned long m_data[4];

private:

	#define uint8  unsigned char
	#define uint32 unsigned long int

	struct md5_context
	{
		uint32 total[2];
		uint32 state[4];
		uint8 buffer[64];
	};

	void md5_starts( struct md5_context *ctx );
	void md5_process( struct md5_context *ctx, uint8 data[64] );
	void md5_update( struct md5_context *ctx, uint8 *input, uint32 length );
	void md5_finish( struct md5_context *ctx, uint8 digest[16] );

	int _httoi(const char *value);

};

//-----------------------------------------------------------------------

#endif
