CATSO* pMultiOfSurSelect = _pCurveAgent->GetListOfValues();

	if (pMultiOfSurSelect->GetSize())//遍历集合里的Body
	{
		cout<<"pTempSO->GetSize() = "<<pMultiOfSurSelect->GetSize()<<endl;
		for (int i = 0;i<pMultiOfSurSelect->GetSize();i++)
		{
		//重点： 不能使用(*pMultiOfSurSelect)[i] 直接获取CATBaseUnknown
		//CATISpecObject* piSpec = (CATISpecObject*)pTempPath->FindElement(IID_CATISpecObject);
		//也不能这样直接获取CATISpecObject
			CATPathElement* pTempPath = (CATPathElement*)(*pMultiOfSurSelect)[i];
			CATBaseUnknown* piBU = (CATBaseUnknown*)pTempPath->FindElement(IID_CATBaseUnknown);
			CATISpecObject_var spiSpecObj1 = GetSpecOfObjectFunc(piBU);
			if (!!spiSpecObj1)
			{
				cout<<spiSpecObj1->GetDisplayName()<<endl;

			}else cout<<"11"<<endl;
	
		}
	}
	
	
	//获取对象CATISpecObject
CATISpecObject_var SYTest2Cmd::GetSpecOfObjectFunc(CATBaseUnknown* ipBUOfObject)
{
	cout<<"GetSpecOfObjectFunc()"<<endl;
	if (!ipBUOfObject)
	{
		cout<<"Internal error :GetSpecOfObjectFunc()->CATBaseUnknown is NULL "<<endl;
		return NULL_var;
	}

	CATISpecObject_var spiSpecOfObj = NULL_var;
	spiSpecOfObj = ipBUOfObject;
	if (!spiSpecOfObj)
	{cout<<"1"<<endl;
		CATIBRepAccess_var spiBRepAccess = ipBUOfObject;
		if (!!spiBRepAccess)
		{cout<<"2"<<endl;
			CATIFeaturize_var spiFeaturize = spiBRepAccess; 
			if (!!spiFeaturize)
				//特征化
				spiSpecOfObj = spiFeaturize->FeaturizeR(MfPermanentBody|MfLastFeatureSupport|MfNoDuplicateFeature);
		}

	}


	return spiSpecOfObj;
}

//另外一种循环方式
CATSO* pObjSO = _pCurveAgent->GetListOfValues(); 
		CATPathElement *pElemPath = NULL;
		if (NULL != pObjSO)  
		{
			pObjSO->InitElementList();
			while (NULL != (pElemPath = (CATPathElement*)pObjSO->NextElement())  )
			{
				CATBaseUnknown *piElementRef = (CATBaseUnknown*)pElemPath->FindElement(IID_CATBaseUnknown);
				if (NULL != piElementRef)