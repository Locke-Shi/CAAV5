// COPYRIGHT Dassault Systemes 2018
//===================================================================
//
// SYTest2Cmd.cpp
// The state chart based command: SYTest2Cmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Dec 2018  Creation: Code generated by the CAA wizard  Administrator
//===================================================================
#include "SYTest2Cmd.h"
//详情见GLV 手套箱项目Welding 完整复杂的选择机制，状态切换

#include "CATCreateExternalObject.h"
CATCreateClass( SYTest2Cmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
SYTest2Cmd::SYTest2Cmd() :
  CATStateCommand ("SYTest2Cmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_pModTSDlg(NULL)
  ,_pPointAgent(NULL),_pCurveAgent(NULL)
  ,_pPointListAgent(NULL),_pCurveListAgent(NULL)
{
	_pModTSDlg = new ModTestSelectDlg;
	_pModTSDlg->Build();
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
SYTest2Cmd::~SYTest2Cmd()
{
   if (_pModTSDlg != NULL) 
      _pModTSDlg->RequestDelayedDestruction();

   if (_pPointAgent != NULL) 
	   _pPointAgent->RequestDelayedDestruction();

   if (_pCurveAgent != NULL) 
	   _pCurveAgent->RequestDelayedDestruction();

   if (_pPointListAgent != NULL) 
	   _pPointListAgent->RequestDelayedDestruction();

   if (_pCurveListAgent != NULL) 
	   _pCurveListAgent->RequestDelayedDestruction();

}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void SYTest2Cmd::BuildGraph()
{
	//定义代理
		//选择代理
	_pPointAgent = new CATPathElementAgent("Point",CATPoint::ClassName(),CATDlgEngWithPrevaluation|CATDlgEngWithCSO );
	_pCurveAgent = new CATPathElementAgent("Curve",CATCurve::ClassName(), CATDlgEngWithPrevaluation|CATDlgEngWithCSO);

		//控件代理（此控件代理最好都是放置在Dlg cpp中，用于获取当前高亮对象是第几个，如下PS，但是不能进行多类型选择的状态跳转）
	_pPointListAgent = new CATDialogAgent("PointList");
	_pPointListAgent->AcceptOnNotify(_pModTSDlg->GetSelectList(1), _pModTSDlg->GetSelectList(1)->GetListSelectNotification());

	_pCurveListAgent = new CATDialogAgent("CurveList");
	_pCurveListAgent->AcceptOnNotify(_pModTSDlg->GetSelectList(2), _pModTSDlg->GetSelectList(2)->GetListSelectNotification());

	//状态定义
		//Point
	CATDialogState * pPointState = GetInitialState("Select Point");
	pPointState->AddDialogAgent(_pPointAgent);
	pPointState->AddDialogAgent(_pPointListAgent);
	pPointState->AddDialogAgent(_pCurveListAgent);
		//Curve
	CATDialogState * pCurveState = AddDialogState("Select Curve");
	pCurveState->AddDialogAgent(_pCurveAgent);
	pCurveState->AddDialogAgent(_pPointListAgent);
	pCurveState->AddDialogAgent(_pCurveListAgent);

	//添加转换
		//Point
	AddTransition ( pPointState , pPointState , 
		IsOutputSetCondition ( _pPointAgent ) ,
		Action ( ( ActionMethod ) &SYTest2Cmd::PointSelected ) );  

	AddTransition ( pPointState , pPointState , 
		IsOutputSetCondition ( _pPointListAgent ) ,
		Action ( ( ActionMethod ) &SYTest2Cmd::PointFieldSelected ) ); 

			//Point -> Curve
	AddTransition ( pPointState , pCurveState , 
		IsOutputSetCondition ( _pCurveListAgent ) ,
		Action ( ( ActionMethod ) &SYTest2Cmd::CurveFieldSelected ) );  


		//Curve
	AddTransition ( pCurveState , pCurveState , 
		IsOutputSetCondition ( _pCurveAgent ) ,
		Action ( ( ActionMethod ) &SYTest2Cmd::CurveSelected ) );  


	AddTransition ( pCurveState , pCurveState , 
		IsOutputSetCondition ( _pCurveListAgent ) ,
		Action ( ( ActionMethod ) &SYTest2Cmd::CurveFieldSelected ) );  
		
		//Curve -> Point
	AddTransition ( pCurveState , pPointState , 
		IsOutputSetCondition ( _pPointListAgent ) ,
		Action ( ( ActionMethod ) &SYTest2Cmd::PointFieldSelected ) ); 

}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean SYTest2Cmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

void SYTest2Cmd::PointSelected()
{
	cout<<"PointSelected"<<endl;
	CATBaseUnknown* pPointBU = _pPointAgent->GetElementValue();

	CATIAlias_var spiAlias = pPointBU;
	cout<<spiAlias->GetAlias()<<endl;
	_pModTSDlg->GetSelectList(1)->SetLine(spiAlias->GetAlias(),0,CATDlgDataModify);
	_pModTSDlg->GetSelectList(1)->ClearSelect();
	int row = 0;
	_pModTSDlg->GetSelectList(2)->SetSelect(&row,1);
	_pPointAgent->InitializeAcquisition();
}

void SYTest2Cmd::CurveSelected()
{
	cout<<"CurveSelected"<<endl;
	CATBaseUnknown* pCurveBU = _pCurveAgent->GetElementValue();

	CATIAlias_var spiAlias = pCurveBU;
	cout<<spiAlias->GetAlias()<<endl;
	_pModTSDlg->GetSelectList(2)->SetLine(spiAlias->GetAlias(),0,CATDlgDataModify);
	_pModTSDlg->GetSelectList(2)->ClearSelect();
	int row = 0;
	_pModTSDlg->GetSelectList(1)->SetSelect(&row,1);
	_pCurveAgent->InitializeAcquisition();//重点！！！！！！！： 如果选择响应函数中有return，把重置函数写在获取值下一行即可。
}

void SYTest2Cmd::PointFieldSelected()
{
	cout<<"PointFieldSelected"<<endl;
	_pModTSDlg->GetSelectList(2)->ClearSelect();
	_pPointListAgent->InitializeAcquisition();
}

void SYTest2Cmd::CurveFieldSelected()
{
	cout<<"CurveFieldSelected"<<endl;
	_pModTSDlg->GetSelectList(1)->ClearSelect();
	_pCurveListAgent->InitializeAcquisition();
}
//PS
 AddAnalyseNotificationCB (_pEditorOfThePoint1, 
                              _pEditorOfThePoint1->GetListSelectNotification(),
                              (CATCommandMethod)&CAAMcaUdfLoftDlg::EditorSelect,
                              (void*)1);

   AddAnalyseNotificationCB (_pEditorOfThePoint2, 
                              _pEditorOfThePoint2->GetListSelectNotification(),
                              (CATCommandMethod)&CAAMcaUdfLoftDlg::EditorSelect,
                              (void*)2);

void CAAMcaUdfLoftDlg::EditorSelect(CATCommand* cmd, 
                                    CATNotification* evt, 
                                    CATCommandClientData data)
{
    
    int number = CATPtrToINT32(data); 

    if (_ActiveEditor != number) 
    {
        if ( _pEditorOfThePoint1 == cmd )
        {
           _pEditorOfThePoint2->ClearSelect();
        }
        else if ( _pEditorOfThePoint2 == cmd )
        {
          _pEditorOfThePoint1->ClearSelect();
        }
    }

    _ActiveEditor = number;
}

//--------------------------------------------------------------------------------------

int CAAMcaUdfLoftDlg::GetActiveEditorNumber()
{
    if (_pEditorOfThePoint1->IsSelect(0)) _ActiveEditor= 1;
    if (_pEditorOfThePoint2->IsSelect(0)) _ActiveEditor= 2;

    return _ActiveEditor; 
}

//--------------------------------------------------------------------------------------

void CAAMcaUdfLoftDlg::SetPointName(int iPointNumber , CATUnicodeString iName )
{
    int RowNb = 0;
    if ( 1 == iPointNumber )
    {
       _pEditorOfThePoint1->ClearLine();
       _pEditorOfThePoint1->SetLine ( iName ); 
       _pEditorOfThePoint2->SetSelect(&RowNb, 1);
    }else
    {
       _pEditorOfThePoint2->ClearLine();
       _pEditorOfThePoint2->SetLine (iName); 
       _pEditorOfThePoint1->SetSelect(&RowNb, 1);
    }
}

//--------------------------------------------------------------------------------------

void CAAMcaUdfLoftDlg::SetRole(int iPointNumber , CATUnicodeString iName )
{
    int RowNb = 0;
    if ( 1 == iPointNumber )
    {
       _pLabelOfThePoint1-> SetTitle(iName+"  "); 
    }else
    {
       _pLabelOfThePoint2-> SetTitle(iName+"  "); 
    }
}

//--------------------------------------------------------------------------------------

void CAAMcaUdfLoftDlg::InitPointName(CATUnicodeString iName1 , CATUnicodeString iName2 )
{
    _pEditorOfThePoint1->ClearLine();
    _pEditorOfThePoint1->SetLine (iName1); 
 
    _pEditorOfThePoint2->ClearLine();
    _pEditorOfThePoint2->SetLine (iName2); 
    
    // SetLine removes the line of the selection. So the first SetSelect, done
    // in the Build Method is invalided by the first ClearLine/SetLine of this
    // method.
    //
    int RowNb = 0 ;
    _pEditorOfThePoint1->SetSelect(&RowNb, 1);
    _ActiveEditor = 1  ;
}

CATBoolean CAAMcaUdfLoftEditCreateCmd::SelectPoint( void *UsefulData)
{
    cout << "CAAMcaUdfLoftEditCreateCmd::SelectPoint" << endl;

    // _pSelectedPath has been valuated into the CheckInput method
    if ( NULL != _pSelectedPath )
    {
       int i = _pInputDialogBox->GetActiveEditorNumber();
       
       if ( i == 1 ) 
       {
           if ( NULL != _pFirstPoint ) _pFirstPoint->Release();
           _pFirstPoint  = _pSelectedPath ;
       }
       if ( i == 2 ) 
       {
           if ( NULL != _pSecondPoint ) _pSecondPoint->Release();
            _pSecondPoint = _pSelectedPath ;
       }

       CATBaseUnknown * pLeaf = NULL ;
       pLeaf = (*_pSelectedPath)[_pSelectedPath->GetSize()-1];

       if ( NULL != pLeaf )
       {
          CATIAlias * pIAlias = NULL ;
          HRESULT rc = pLeaf->QueryInterface(IID_CATIAlias,(void**)& pIAlias);
          if ( SUCCEEDED(rc) )
          {
             _pInputDialogBox->SetPointName(i,pIAlias->GetAlias());
                  
             pIAlias->Release();
             pIAlias = NULL ;
          }
       }
       // The pointer is kept by _pSecondPoint or _pFirstPoint
       _pSelectedPath = NULL ;
    }

    if ( (NULL != _pFirstPoint ) && ( NULL != _pSecondPoint) )
    {
        _pInputDialogBox->SetOKSensitivity(CATDlgEnable);
        _pInputDialogBox->SetPREVIEWSensitivity(CATDlgEnable);
    }

    // To enable a new selection with the same agent
    _pFeatureAgent->InitializeAcquisition();    

    return TRUE;
}
//CheckInput
  // This method,from CATMMUIPanelStateCommand, manages the OK, Cancel transitions
        CATDialogState * pInputState = GetInitialPanelState("InputStateId");

        _pFeatureAgent = new CATFeatureImportAgent("PointAgentId");
        _pFeatureAgent->SetBehavior(CATDlgEngWithPSOHSO | CATDlgEngWithPrevaluation);

        pInputState->AddDialogAgent(_pFeatureAgent);

        CATDialogTransition * pInputTransition = AddTransition(pInputState,pInputState,
                      AndCondition(IsOutputSetCondition(_pFeatureAgent),
                      Condition((ConditionMethod) & CAAMcaUdfLoftEditCreateCmd::CheckInput)),
                      Action((ActionMethod) &CAAMcaUdfLoftEditCreateCmd::SelectPoint));

        pInputTransition->SetResourceID("InputTransitionId");


CATBoolean CAAMcaUdfLoftEditCreateCmd::CheckInput( void *UsefulData)
{
    CATBoolean rcode = FALSE;

    cout << "CAAMcaUdfLoftEditCreateCmd::CheckInput" << endl;

    // GetElementValue does not addref the returned pointer
    CATPathElement * pPathElt= _pFeatureAgent->GetValue();
    if ( NULL != pPathElt )
    {
       int i = _pInputDialogBox->GetActiveEditorNumber();

       CATIUdfFeatureInstance_var spFeatInst = GiveMyFeature();

       CATPathElement * pFilterPath = NULL ;
       HRESULT rc = spFeatInst->FilterInput(i,pPathElt,&pFilterPath);

       if ( SUCCEEDED(rc)  && ( NULL != pFilterPath) )
       {
          if (  0 != pFilterPath->GetSize() )
          {
             CATBaseUnknown * pLeaf = NULL ;
             pLeaf = (*pFilterPath)[pFilterPath->GetSize()-1];

             if ( NULL != pLeaf )
             {
                rcode = TRUE ;
 
                _pSelectedPath = pFilterPath ;
                _pSelectedPath->AddRef() ;
             }
          } 
          pFilterPath->Release();
          pFilterPath = NULL ;
       }   
    }

    if ( FALSE == rcode )
    {
       // To select a new feature
       _pFeatureAgent->InitializeAcquisition();
    }

    return rcode;
}