// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// JDAPTProductCreateEditMemoCmd.cpp
// The state chart based command: JDAPTProductCreateEditMemoCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2009  Creation: Code generated by the CAA wizard  LuJun
//===================================================================
#include "JDAPTProductCreateEditMemoCmd.h"
//#include "CATIndicationAgent.h"
//#include "CATMathPlane.h"
#include "CATFrmEditor.h"
#include "CATDocument.h"
#include "CATIDocRoots.h"
#include "JDAIPTDocument.h"
#include "JDAIPTMemoFactory.h"

#include "CATPathElement.h"
#include "CATIProduct.h"

#include "iostream.h"


#include "CATCreateExternalObject.h"
CATCreateClassArg( JDAPTProductCreateEditMemoCmd,JDAIPTMemo);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
JDAPTProductCreateEditMemoCmd::JDAPTProductCreateEditMemoCmd(JDAIPTMemo *ipiMemo) :
  CATStateCommand ("JDAPTProductCreateEditMemoCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_OkAgent(NULL),_CloseAgent(NULL),_ApplyAgent(NULL),_Panel(NULL)
  ,_piMemo(ipiMemo)
{
	if( _piMemo )
		_piMemo->AddRef();

	//cout <<"==> In JDAPTProductCreateEditMemoCmd ...... " << endl;
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
JDAPTProductCreateEditMemoCmd::~JDAPTProductCreateEditMemoCmd()
{
	if (_OkAgent != NULL) {
		_OkAgent->RequestDelayedDestruction();
		_OkAgent = NULL;
	}
	if (_CloseAgent != NULL) {
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}
	if (_ApplyAgent != NULL) {
		_ApplyAgent->RequestDelayedDestruction();
		_ApplyAgent = NULL;
	}
	if (_Panel != NULL) {
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}
	
	if(_piMemo != NULL ) {
		_piMemo->Release();
		_piMemo = NULL;
	}

}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void JDAPTProductCreateEditMemoCmd::BuildGraph()
{
	// Display the Panel
	// -------------------
	_Panel = new JDAPTCreateEditMemoDlg();
	_Panel->Build();
	_Panel->SetVisibility(CATDlgShow);
	//_Panel->SetOKSensitivity(CATDlgDisable);

	// Case of an edition
	// ------------------
	if (_piMemo != NULL) {
		//Set initial text in panel
		double x,y,z;
		_piMemo->GetX(x);
		_Panel->SetX(x);
		_piMemo->GetY(y);
		_Panel->SetY(y);
		_piMemo->GetZ(z);
		_Panel->SetZ(z);

		//Enable ok button
		//_Panel->SetOKSensitivity(CATDlgEnable);
	}

	// Define the StateChart 
	// ---------------------------
	_OkAgent = new CATDialogAgent ("OkAgent");
	_OkAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	_ApplyAgent = new CATDialogAgent ("ApplyAgent");
	_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification ());
	  
	_CloseAgent = new CATDialogAgent ("CancelAgent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCLOSENotification());

	CATDialogState * initialState = GetInitialState("initialState");
	initialState -> AddDialogAgent (_OkAgent);
	initialState -> AddDialogAgent (_ApplyAgent);
	initialState -> AddDialogAgent (_CloseAgent);
	  
	AddTransition( initialState, initialState, 
					IsOutputSetCondition (_ApplyAgent),
					Action ((ActionMethod) &JDAPTProductCreateEditMemoCmd::ApplyAction));
	AddTransition( initialState, NULL,
					IsOutputSetCondition (_OkAgent),
					Action ((ActionMethod) &JDAPTProductCreateEditMemoCmd::OkAction));
	AddTransition( initialState, NULL,
					IsOutputSetCondition (_CloseAgent),
					Action ((ActionMethod) &JDAPTProductCreateEditMemoCmd::CloseAction));
}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean JDAPTProductCreateEditMemoCmd::OkAction( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

	//cout <<"==> In JDAPTProductCreateEditMemoCmd::OkAction ...... " << endl;
	//Retrieve the product document
	CATDocument *pDocument=NULL;
	CATFrmEditor *pEditor = CATFrmEditor::GetCurrentEditor();
	CATPathElement activePath = pEditor->GetUIActiveObject();
	CATIProduct *activeProduct = (CATIProduct *)activePath.SearchObject(CATIProduct::ClassName());
	if( !!activeProduct ) {
		CATIProduct_var spRefProduct=activeProduct->GetReferenceProduct();
		CATILinkableObject_var spLink=spRefProduct;
		pDocument = spLink->GetDocument();
		activeProduct->Release();  activeProduct = NULL;
	}
	if( !pDocument ) return FALSE;

	////Retrieve the root product of the document
	//CATIProduct_var spRootProduct = NULL_var;
	//CATIDocRoots_var spRootsOnDoc = pDocument;
	//CATListValCATBaseUnknown_var* listRoot = spRootsOnDoc->GiveDocRoots();
	//if (listRoot) {
	//	spRootProduct = (*listRoot) [1];
	//	delete listRoot;
	//}
	//else
	//	cout <<"  ==> Get spRootProduct error !" << endl;
	if (_piMemo != NULL) {
		// Edition of an existing memo
		// ---------------------------
		double x,y,z;
		_Panel->GetX(x);
		_piMemo->SetX(x);
		_Panel->GetY(y);
		_piMemo->SetY(y);
		_Panel->GetZ(z);
		_piMemo->SetZ(z);

		//Update the memo feature
		CATISpecObject_var spSpecOnMemo = _piMemo;
		spSpecOnMemo->Update();
  } else {
    
    // Creation of a new Memo
    // ----------------------
    //Retrieve the factory
    JDAIPTDocument *piProduct = NULL;
    HRESULT hr = pDocument->QueryInterface (IID_JDAIPTDocument, (void**)&piProduct);

    //Create the container if it does not exist yet
    CATIContainer *piContainer = NULL;
    if (SUCCEEDED(hr) && piProduct ) {
      piProduct->GetContainer(&piContainer, true);
      piProduct->Release();     piProduct = NULL;
    }
	

    //Retrieve the annotation factory on the container
    JDAIPTMemoFactory *piFactoryOnCont = NULL;
    if (!!piContainer) {
      hr = piContainer->QueryInterface (IID_JDAIPTMemoFactory, (void**)&piFactoryOnCont);
      piContainer->Release();      piContainer = NULL;
    }
    
    //Instanciate the memo feature
    if (SUCCEEDED(hr) && !!piFactoryOnCont ) {
		double x,y,z;
		_Panel->GetX(x);
		_Panel->GetY(y);
		_Panel->GetZ(z);
		hr = piFactoryOnCont->CreateJDAPoint(x,y,z, &_piMemo);
		piFactoryOnCont->Release();		piFactoryOnCont = NULL;
    }
  }
	//cout <<"==> In JDAPTProductCreateEditMemoCmd::OkAction ......End " << endl;

  return TRUE;
}
CATBoolean JDAPTProductCreateEditMemoCmd::ApplyAction( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------
	//cout <<"==> Apply action !" << endl;
	//cout << "==> The input parameter: " << num << endl;
	_ApplyAgent->InitializeAcquisition();

	return TRUE;
}
CATBoolean JDAPTProductCreateEditMemoCmd::CloseAction( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------
	//cout <<"==> Close action !" << endl;
	ExecuteUndoAtEnd();
	return TRUE;
}
