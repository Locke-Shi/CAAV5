// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// JDAEPTMemo3DVisu.cpp
// Provide implementation to interface
//    CATI3DGeoVisu
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Apr 2009  Creation: Code generated by the CAA wizard  LuJun
//===================================================================
#include "JDAEPTMemo3DVisu.h"

#include "CATMath.h"
#include "CAT3DPolylineGP.h"
#include "CATMathDirection2Df.h"
//#include "TST3DAnnotationArrowGP.h"
#include "CAT3DBoundingSphere.h"
#include "CATUnicodeString.h"
#include "CATMathPoint.h"
#include "JDAIPTMemo.h"
#include "CATGraphicAttributeSet.h"
#include "CATMathPointf.h"
#include "CATMathDirectionf.h"
#include "CATMathVectorf.h"
#include "CAT3DCustomRep.h"
#include "CATMathPointf.h"
#include "CAT3DPointRep.h"

#include "iostream.h"

 
CATImplementClass(JDAEPTMemo3DVisu,
                  DataExtension,
                  CATExtIVisu,
                  JDAPTMemo );
 

//-----------------------------------------------------------------------------
// JDAEPTMemo3DVisu : constructor
//-----------------------------------------------------------------------------
JDAEPTMemo3DVisu::JDAEPTMemo3DVisu():
    CATExtIVisu()
{
}

//-----------------------------------------------------------------------------
// JDAEPTMemo3DVisu : destructor
//-----------------------------------------------------------------------------
JDAEPTMemo3DVisu::~JDAEPTMemo3DVisu()
{
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_CATI3DGeoVisu.h"
TIE_CATI3DGeoVisu( JDAEPTMemo3DVisu);

//Creates a fixed arrow GP in a custom rep
CATRep * JDAEPTMemo3DVisu::BuildRep ()
{
	//cout <<"==> Now we are in JDAEPTMemo3DVisu::BuildRep  !" << endl;

	HRESULT hr;
	//CAT3DCustomRep *pRep = new CAT3DCustomRep ();

	//Retrieve text and position
	double x,y,z;
	JDAIPTMemo * piMemo = NULL;
	hr = this->QueryInterface (IID_JDAIPTMemo, (void**) &piMemo);

	if (SUCCEEDED(hr)) {
		piMemo->GetX(x);
		piMemo->GetY(y);
		piMemo->GetZ(z);
		piMemo->Release();
		piMemo = NULL;
	}
	else
		cout << "  ==> Get JDAIPTMemo error !" << endl;

	CATMathPoint position(x,y,z);
	CAT3DPointRep *pRep = new CAT3DPointRep (position);

	//CATMathDirectionf xDir(1.,0.,0.);
	//int baseLength = 1;
	//int arrowLength = 9;
	//int arrowHeadHeight = 2;
	//CATMathPointf origin = position;

	////Create the arrow GP
	//CATMathDirection2Df x2DDir(1.,1.);
	//TST3DAnnotationArrowGP *pArrowGP = NULL;
	//pArrowGP = new TST3DAnnotationArrowGP( origin, x2DDir, arrowLength, 
	//                                  arrowHeadHeight, baseLength );

	//
	//pArrowGP->AssociateText(text);

	//CATGraphicAttributeSet aSet;
	//pRep->AddGP(pArrowGP, aSet);

	//We MUST create the associated bounding box:
	// we use a bounding sphere centered on the origin of the arrow
	// and a radius defined in screen mm (third parameter)
	float center[3] = {position.GetX(), position.GetY(), position.GetZ()};
	float radius = 20.; //2 cm ecran
	CAT3DBoundingSphere bs(center, 0., radius);
	pRep->SetBoundingElement(bs);

	//cout <<"==> Now end JDAEPTMemo3DVisu::BuildRep  !" << endl;

	return pRep;
}


//Methods implementation

