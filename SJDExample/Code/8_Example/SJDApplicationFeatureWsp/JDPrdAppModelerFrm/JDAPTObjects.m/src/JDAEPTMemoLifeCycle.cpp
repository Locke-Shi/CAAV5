// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// JDAEPTMemoLifeCycle.cpp
// Provide implementation to interface
//    LifeCycleObject
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Apr 2009  Creation: Code generated by the CAA wizard  LuJun
//===================================================================
#include "JDAEPTMemoLifeCycle.h"

#include "CATIRedrawEvent.h"
#include "CATDelete.h"
#include "CATIModelEvents.h"

#include "iostream.h"


 
CATImplementClass(JDAEPTMemoLifeCycle,
                  DataExtension,
                  CATSpecLifeCycleObjectExt,
                  JDAPTMemo );
 

//-----------------------------------------------------------------------------
// JDAEPTMemoLifeCycle : constructor
//-----------------------------------------------------------------------------
JDAEPTMemoLifeCycle::JDAEPTMemoLifeCycle():
    CATSpecLifeCycleObjectExt()
{
}

//-----------------------------------------------------------------------------
// JDAEPTMemoLifeCycle : destructor
//-----------------------------------------------------------------------------
JDAEPTMemoLifeCycle::~JDAEPTMemoLifeCycle()
{
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_LifeCycleObject.h"
TIE_LifeCycleObject( JDAEPTMemoLifeCycle);


//Methods implementation

//-----------------------------------------------------------------------------
// Implements LifeCycleObject::remove
//-----------------------------------------------------------------------------
void JDAEPTMemoLifeCycle::remove (int  iForCloseContext)
{
	//cout <<"==> Now we are in JDAEPTMemoLifeCycle::remove  !" << endl;

	HRESULT hr;
	if (!iForCloseContext) {
		//Update the graph
		CATIRedrawEvent *piRedraw = NULL;
		hr = this->QueryInterface(IID_CATIRedrawEvent, (void**) &piRedraw);
		if (SUCCEEDED(hr)) {
			piRedraw->RedrawParent();
			piRedraw->Release();
			piRedraw = NULL;
		}
		else
			cout << "  ==> Get CATIRedrawEvent error !" << endl;

		//Update the view
		CATIModelEvents *piEvents = NULL;
		hr = this->QueryInterface(IID_CATIModelEvents, (void**) &piEvents);

		if (SUCCEEDED(hr)) {
			CATDelete delNotif (this);
			piEvents->Dispatch(delNotif);
			piEvents->Release();
			piEvents = NULL;
		}
		else
			cout << "  ==> Get CATIModelEvents error !" << endl;
	}

	CATSpecLifeCycleObjectExt::remove(iForCloseContext);

	//cout <<"==> Now end JDAEPTMemoLifeCycle::remove  !" << endl;

	return;
}

