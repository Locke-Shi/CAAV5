// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// JDAEPTMemo.cpp
// Provide implementation to interface
//    JDAIPTMemo
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Apr 2009  Creation: Code generated by the CAA wizard  LuJun
//===================================================================
#include "JDAEPTMemo.h"

#include "CATISpecAttrAccess.h"
#include "CATISpecAttrKey.h"
#include "CATICkeParm.h"
#include "CATISpecObject.h"

#include "iostream.h"


CATImplementClass(JDAEPTMemo,
                  DataExtension,
                  CATBaseUnknown,
                  JDAPTMemo );
 

//-----------------------------------------------------------------------------
// JDAEPTMemo : constructor
//-----------------------------------------------------------------------------
JDAEPTMemo::JDAEPTMemo():
    CATBaseUnknown()
{
	//cout <<"==> In JDAEPTMemo ......" << endl;
}

//-----------------------------------------------------------------------------
// JDAEPTMemo : destructor
//-----------------------------------------------------------------------------
JDAEPTMemo::~JDAEPTMemo()
{
	//cout <<"==> In JDAEPTMemo ......end !" << endl;
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_JDAIPTMemo.h"
TIE_JDAIPTMemo( JDAEPTMemo);


//Methods implementation

//-----------------------------------------------------------------------------
// Implements JDAIPTMemo::GetX
//-----------------------------------------------------------------------------
HRESULT JDAEPTMemo::GetX (double & oX)
{

	//cout <<"==> Now we are in JDAEPTMemo::GetX  !" << endl;

	HRESULT hr = E_FAIL;
	//Retrieve the literal feature
	CATBaseUnknown *piLiteralString = NULL;
	hr = GetLiteralParameter("X",&piLiteralString);

	CATICkeParm *piParmOnString = NULL;
	if (SUCCEEDED(hr)) {
		hr = piLiteralString->QueryInterface (IID_CATICkeParm, (void **) &piParmOnString);
		piLiteralString->Release();		piLiteralString = NULL;
	}
	else
		cout << "  ==> Get GetLiteralParameter error !" << endl;

	//Get its value
	if (SUCCEEDED(hr)) {
		CATICkeInst_var spParmValue = piParmOnString->Value();
		oX = spParmValue->AsReal();
		piParmOnString->Release();		piParmOnString = NULL;
	}
	else
		cout << "  ==> Get CATICkeParm  error !" << endl;

	//cout <<"==> Now end JDAEPTMemo::GetX  !" << endl;

	return hr;
	
}

//-----------------------------------------------------------------------------
// Implements JDAIPTMemo::SetX
//-----------------------------------------------------------------------------
HRESULT JDAEPTMemo::SetX (double  iX)
{

	//cout <<"==> Now we are in JDAEPTMemo::SetX  !" << endl;

	HRESULT hr = E_FAIL;
	//Retrieve the literal feature
	CATBaseUnknown *piLiteralString = NULL;
	hr = GetLiteralParameter("X",&piLiteralString);

	CATICkeParm *piParmOnString = NULL;
	if (SUCCEEDED(hr)) {
		hr = piLiteralString->QueryInterface (IID_CATICkeParm, (void **) &piParmOnString);
		piLiteralString->Release();		piLiteralString = NULL;
	}
	else
		cout << "  ==> Get GetLiteralParameter error !" << endl;

	//Set its value
	if (SUCCEEDED(hr)) {
		piParmOnString->Valuate (iX);
		piParmOnString->Release();		piParmOnString = NULL;
	}
	else
		cout << "  ==> Get CATICkeParm error !" << endl;

	//cout <<"==> Now end JDAEPTMemo::SetX  !" << endl;

	return hr;	
}

//-----------------------------------------------------------------------------
// Implements JDAIPTMemo::GetY
//-----------------------------------------------------------------------------
HRESULT JDAEPTMemo::GetY (double & oY)
{

	//cout <<"==> Now we are in JDAEPTMemo::GetY  !" << endl;

	HRESULT hr = E_FAIL;
	//Retrieve the literal feature
	CATBaseUnknown *piLiteralString = NULL;
	hr = GetLiteralParameter("Y",&piLiteralString);

	CATICkeParm *piParmOnString = NULL;
	if (SUCCEEDED(hr)) {
		hr = piLiteralString->QueryInterface (IID_CATICkeParm, (void **) &piParmOnString);
		piLiteralString->Release();		piLiteralString = NULL;
	}
	else
		cout << "  ==> Get GetLiteralParameter error !" << endl;

	//Get its value
	if (SUCCEEDED(hr)) {
		CATICkeInst_var spParmValue = piParmOnString->Value();
		oY = spParmValue->AsReal();
		piParmOnString->Release();		piParmOnString = NULL;
	}
	else
		cout << "  ==> Get CATICkeParm error !" << endl;

	//cout <<"==> Now end JDAEPTMemo::GetY  !" << endl;

	return hr;
}

//-----------------------------------------------------------------------------
// Implements JDAIPTMemo::SetY
//-----------------------------------------------------------------------------
HRESULT JDAEPTMemo::SetY (double  iY)
{
	//cout <<"==> Now we are in JDAEPTMemo::SetY  !" << endl;

	HRESULT hr = E_FAIL;
	//Retrieve the literal feature
	CATBaseUnknown *piLiteralString = NULL;
	hr = GetLiteralParameter("Y",&piLiteralString);

	CATICkeParm *piParmOnString = NULL;
	if (SUCCEEDED(hr)) {
		hr = piLiteralString->QueryInterface (IID_CATICkeParm, (void **) &piParmOnString);
		piLiteralString->Release();		piLiteralString = NULL;
	}
	else
		cout << "  ==> Get GetLiteralParameter error !" << endl;

	//Set its value
	if (SUCCEEDED(hr)) {
		piParmOnString->Valuate (iY);
		piParmOnString->Release();		piParmOnString = NULL;
	}
	else
		cout << "  ==> Get CATICkeParm error !" << endl;
	
	//cout <<"==> Now end JDAEPTMemo::SetY  !" << endl;

	return hr;	
}

//-----------------------------------------------------------------------------
// Implements JDAIPTMemo::GetZ
//-----------------------------------------------------------------------------
HRESULT JDAEPTMemo::GetZ (double & oZ)
{

	//cout <<"==> Now we are in JDAEPTMemo::GetZ  !" << endl;

	HRESULT hr = E_FAIL;
	//Retrieve the literal feature
	CATBaseUnknown *piLiteralString = NULL;
	hr = GetLiteralParameter("Z",&piLiteralString);

	CATICkeParm *piParmOnString = NULL;
	if (SUCCEEDED(hr)) {
		hr = piLiteralString->QueryInterface (IID_CATICkeParm, (void **) &piParmOnString);
		piLiteralString->Release();		piLiteralString = NULL;
	}
	else
		cout << "  ==> Get GetLiteralParameter error !" << endl;

	//Get its value
	if (SUCCEEDED(hr)) {
		CATICkeInst_var spParmValue = piParmOnString->Value();
		oZ = spParmValue->AsReal();
		piParmOnString->Release();		piParmOnString = NULL;
	}
	else
		cout << "  ==> Get CATICkeParm error !" << endl;

	//cout <<"==> Now end JDAEPTMemo::GetZ  !" << endl;

	return hr;
}

//-----------------------------------------------------------------------------
// Implements JDAIPTMemo::SetZ
//-----------------------------------------------------------------------------
HRESULT JDAEPTMemo::SetZ (double  iZ)
{

	//cout <<"==> Now we are in JDAEPTMemo::SetZ  !" << endl;

	HRESULT hr = E_FAIL;
	//Retrieve the literal feature
	CATBaseUnknown *piLiteralString = NULL;
	hr = GetLiteralParameter("Z",&piLiteralString);

	CATICkeParm *piParmOnString = NULL;
	if (SUCCEEDED(hr)) {
		hr = piLiteralString->QueryInterface (IID_CATICkeParm, (void **) &piParmOnString);
		piLiteralString->Release();		piLiteralString = NULL;
	}
	else
		cout << "  ==> Get GetLiteralParameter error !" << endl;

	//Set its value
	if (SUCCEEDED(hr)) {
		piParmOnString->Valuate (iZ);
		piParmOnString->Release();		piParmOnString = NULL;
	}
	else
		cout << "  ==> Get CATICkeParm error !" << endl;

	//cout <<"==> Now end JDAEPTMemo::SetZ  !" << endl;

	return hr;
}
HRESULT JDAEPTMemo::GetLiteralParameter(CATUnicodeString iParamName,CATBaseUnknown **oLiteralParam)
{

	//cout <<"==> Now we are in JDAEPTMemo::GetLiteralParameter  !" << endl;

	HRESULT rc=E_FAIL;

	(*oLiteralParam) = NULL;
	CATISpecAttrKey *pSpecKey=NULL;

	CATISpecAttrAccess_var spAccess = this;
	if (!!spAccess ) {
		pSpecKey = spAccess->GetAttrKey(iParamName);
	}

	if (!!spAccess && pSpecKey) {
		(*oLiteralParam) = spAccess->GetSpecObject(pSpecKey);
		if (*oLiteralParam) rc = S_OK;
		pSpecKey->Release();  pSpecKey = NULL;
	}

	//cout <<"==> Now end JDAEPTMemo::GetLiteralParameter  !" << endl;

	return rc;
}

