// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// JDAEPTDocument.h
// Provide implementation to interface
//    JDAIPTDocument

//
//===================================================================
//
// Usage notes:
//
//===================================================================
//CAA2 Wizard Generation Report
//EXTENSION:	CATProduct
//EXTENSIONTYPE:	DataExtension

//    TIE: JDAIPTDocument

//End CAA2 Wizard Generation Report
//
//  Apr 2009  Creation: Code generated by the CAA wizard  LuJun
//===================================================================
#ifndef JDAEPTDocument_H
#define JDAEPTDocument_H

#include "CATBaseUnknown.h"
#include "CATBoolean.h"
class CATIContainer;

#include "CATIProduct.h"
#include "CATILinkableObject.h"

//-----------------------------------------------------------------------

/**
* Class representing xxx.
*
* <br><b>Role</b>: Provide the basic class function...
* <p>
* It implements the interfaces :
*  <ol>
*  <li>@href JDAIPTDocument
*  </ol>
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class JDAEPTDocument: public CATBaseUnknown

{
  CATDeclareClass;

  public:

  // Standard constructors and destructors for an implementation class
  // -----------------------------------------------------------------
     JDAEPTDocument ();
     virtual ~JDAEPTDocument ();

    /**
     * Implements a function from an interface.
     * @href JDAIPTDocument#GetContainer
     */
     HRESULT GetContainer (CATIContainer ** opiContainer  , CATBoolean  iCreateIfNeeded  = false) ;


  private:
	  //HRESULT GetRootProduct(CATILinkableObject_var ispiLinkObject,CATIProduct_var &ospiRootProduct);
  // The copy constructor and the equal operator must not be implemented
  // -------------------------------------------------------------------
  JDAEPTDocument (JDAEPTDocument &);
  JDAEPTDocument& operator=(JDAEPTDocument&);

};

//-----------------------------------------------------------------------

#endif
