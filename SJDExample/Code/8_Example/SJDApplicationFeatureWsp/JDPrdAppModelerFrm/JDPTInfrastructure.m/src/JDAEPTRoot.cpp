// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// JDAEPTRoot.cpp
// Provide implementation to interface
//    JDAIPTRoot
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Apr 2009  Creation: Code generated by the CAA wizard  LuJun
//===================================================================
#include "JDAEPTRoot.h"
#include "CATIModelEvents.h"
#include "CATCreate.h"
#include "CATIRedrawEvent.h"
#include "CATIDescendants.h"
#include "CATISpecAttrAccess.h"
#include "CATISpecAttrKey.h"
#include "CATISpecObject.h"
#include "CATISpecAttrKey.h"
//#include "TSTAnoFeatureNames.h"

#include "iostream.h"


 
CATImplementClass(JDAEPTRoot,
                  CodeExtension,
                  CATBaseUnknown,
                  JDAPTRoot );
 

//-----------------------------------------------------------------------------
// JDAEPTRoot : constructor
//-----------------------------------------------------------------------------
JDAEPTRoot::JDAEPTRoot():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// JDAEPTRoot : destructor
//-----------------------------------------------------------------------------
JDAEPTRoot::~JDAEPTRoot()
{
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_JDAIPTRoot.h"
TIE_JDAIPTRoot( JDAEPTRoot);


//Methods implementation

//-----------------------------------------------------------------------------
// Implements JDAIPTRoot::AddChild
//-----------------------------------------------------------------------------
HRESULT JDAEPTRoot::AddChild (CATISpecObject * ipiFeature)
{

	//cout <<"==> Now we are in JDAEPTRoot::AddChild  !" << endl;

	HRESULT hr; hr = E_FAIL;
  
	CATIDescendants *piDescendant = NULL;
	hr = this->QueryInterface(IID_CATIDescendants, (void**) &piDescendant);

	if (SUCCEEDED(hr) && piDescendant) {
		piDescendant->Append(ipiFeature);
		piDescendant->Release();
		piDescendant = NULL;
	}
	else
		cout << "  ==> Get IID_CATIDescendants error !" << endl;
	 
	///--- Solution for Exercise : Navigation
	//Redraw the graph
	CATIRedrawEvent_var spRedraw = this; 
	if (spRedraw != NULL_var) {
		spRedraw->Redraw();
	}
	else
		cout << "  ==> Get CATIRedrawEvent_var error !" << endl;
	///------ End Solution: Navigation
	  
	///--- Solution for Exercise : 3D Visualization
	//Connect the object to the root
	CATIModelEvents_var spEventsOnRoot = this;
	spEventsOnRoot->ConnectTo(ipiFeature);

	//Notify Creation to the view
	CATCreate ntfCreate(ipiFeature, spEventsOnRoot);
	spEventsOnRoot->Dispatch(ntfCreate);
	///------ End Solution: 3D Visualization

	//cout <<"==> Now end JDAEPTRoot::AddChild  !" << endl;

	return hr;
}

//-----------------------------------------------------------------------------
// Implements JDAIPTRoot::RemoveChild
//-----------------------------------------------------------------------------
HRESULT JDAEPTRoot::RemoveChild (CATISpecObject * ipiFeature)
{

	//cout <<"==> Now we are in JDAEPTRoot::RemoveChild  !" << endl;

	HRESULT hr; hr = E_FAIL;

	CATIDescendants *piDescendant = NULL;
	hr = this->QueryInterface(IID_CATIDescendants, (void**) &piDescendant);

	if (SUCCEEDED(hr) && piDescendant) {
		piDescendant->RemoveChild(ipiFeature);
		piDescendant->Release();
		piDescendant = NULL;
	}
	else
		cout << "  ==> Get CATIDescendants error !" << endl;

	//cout <<"==> Now end JDAEPTRoot::RemoveChild  !" << endl;

    return hr;
}

//-----------------------------------------------------------------------------
// Implements JDAIPTRoot::GetChildren
//-----------------------------------------------------------------------------
HRESULT JDAEPTRoot::GetChildren (const IID & iItfIID , CATListValCATBaseUnknown_var *&  oList)
{

	//cout <<"==> Now we are in JDAEPTRoot::GetChildren  !" << endl;

	HRESULT hr; hr = E_FAIL;
	oList = NULL;

	//Here we do not use CATIDescendants because of a list type mismatch
	// virtual void GetDirectChildren (CATClassId iIntfName,CATListValCATISpecObject_var &oLst)   = 0    ;

	CATISpecAttrAccess *piAccess = NULL;
	hr = this->QueryInterface(IID_CATISpecAttrAccess, (void**) &piAccess);

	CATISpecAttrKey *piListFeatureKey=NULL;
	if (SUCCEEDED(hr) ) {
		piListFeatureKey = piAccess->GetAttrKey("ListComponents");
	}
	else
		cout << "  ==> Get CATISpecAttrAccess error !" << endl;

	if (SUCCEEDED(hr) && piListFeatureKey) {
		oList = piAccess->ListSpecObjects(piListFeatureKey, iItfIID);
		piAccess->Release();		piAccess = NULL;
		piListFeatureKey->Release();  piListFeatureKey = NULL;
		if (!oList)
			hr = E_FAIL;
		//else
			//cout <<"  ==> The number of JDAEPTRoot: " << oList->Size() << endl;
	}
	else
		cout << "  ==> Get CATISpecAttrKey error !" << endl;

	//cout <<"==> Now end JDAEPTRoot::GetChildren  !" << endl;

	return hr;

}

