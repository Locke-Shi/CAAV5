// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// JDAPTUpdateProvider.cpp
// Provide implementation to interface
//    CATIUpdateProvider
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Apr 2009  Creation: Code generated by the CAA wizard  LuJun
//===================================================================
#include "JDAPTUpdateProvider.h"

#include "CATIProduct.h"
#include "JDAIPTContainer.h"
#include "JDAIPTRoot.h"
#include "CATISpecUpdate.h"
#include "CATIContainer.h"
#include "JDAIPTDocument.h"

#include "CATDocument.h"
#include "CATILinkableObject.h"
//#include "CATIAlias.h"
#include "CATIPrtPart.h"

#include "iostream.h"


 
CATImplementClass(JDAPTUpdateProvider,
                  Implementation,
                  CATBaseUnknown,
                  CATnull );
 

//-----------------------------------------------------------------------------
// JDAPTUpdateProvider : constructor
//-----------------------------------------------------------------------------
JDAPTUpdateProvider::JDAPTUpdateProvider():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// JDAPTUpdateProvider : destructor
//-----------------------------------------------------------------------------
JDAPTUpdateProvider::~JDAPTUpdateProvider()
{
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_CATIUpdateProvider.h"
TIE_CATIUpdateProvider(JDAPTUpdateProvider);


//Methods implementation

//-----------------------------------------------------------------------------
// Implements CATIUpdateProvider::Update
//-----------------------------------------------------------------------------
int JDAPTUpdateProvider::Update (CATBaseUnknown*  iWorkingObj , CATIDomain_var  iDomain )
{
	//cout <<"==> Now we are in JDAPTUpdateProvider::Update  !" << endl;
	HRESULT hr;
	hr = E_FAIL;
	//CATIAlias_var spAlias = iWorkingObj;
	  
	//Get the document of the input object
	CATILinkableObject_var spLink = iWorkingObj;
	CATDocument *pDoc = spLink->GetDocument();
	if( !pDoc )   return hr;

	//We update our objects only under the root product itself
	// if we are in a CATProduct document or under the MechanicalPart if
	// we are in a CATPart document
	CATBoolean isUpdatable;
	isUpdatable = false;

	if (pDoc->IsAKindOf("CATProduct")) {
		isUpdatable = true;
		//Check that the object does not have a father
		CATIProduct_var spProdObj = iWorkingObj;
		if (spProdObj != NULL_var) {
			CATIProduct_var spFatherProd = spProdObj->GetFatherProduct();
			if (spFatherProd != NULL_var) {
				CATIProduct_var spRefProduct=spProdObj->GetReferenceProduct();
				spLink = spRefProduct;
				pDoc = spLink->GetDocument();

				if( !(pDoc->IsAKindOf("CATProduct"))) { isUpdatable = false; }
			}
		}
	}

	if (pDoc && isUpdatable) {
		//cout <<"   ==> UPDATABLE"<<endl;
		//Retrieve annotation container
		JDAIPTDocument *piAnoDoc = NULL;
		CATIContainer *piCont = NULL;
		hr = pDoc->QueryInterface(IID_JDAIPTDocument, (void**)&piAnoDoc);
		if (SUCCEEDED(hr) && piAnoDoc) {
			hr = piAnoDoc->GetContainer(&piCont);
			piAnoDoc->Release(); piAnoDoc = NULL;
		}
		else
			cout << "  ==> Get IID_JDAIPTDocument error !" << endl;

		//Retrieve the applicative Root object
		JDAIPTRoot *piAnoRoot = NULL;
		if (piCont) {
			JDAIPTContainer *piAnoCont = NULL;
			hr = piCont->QueryInterface (IID_JDAIPTContainer, (void**)&piAnoCont);
			//piCont->Release(); piCont = NULL;
			if (SUCCEEDED(hr) && piAnoCont) {
				hr = piAnoCont->GetRoot(&piAnoRoot);
				piAnoCont->Release(); piAnoCont = NULL;
			}
			else
				cout << "  ==> Get JDAIPTContainer error !" << endl;
		}
		else
			cout << "  ==> Get CATIContainer error !" << endl;

		//Update the root
		CATISpecUpdate_var spUpdate = piAnoRoot;
		if (!!spUpdate) {
			spUpdate->Update(iDomain); 
			hr = S_OK;
		} else {
			cout << "  ==> Get JDAIPTRoot error !" << endl;
			hr = E_FAIL;
		}
	}
	else
		cout <<"   ==> Not UPDATABLE"<<endl;

	//cout <<"==> Now end JDAPTUpdateProvider::Update  !" << endl;
	  
	return hr;
	//return 0;
}

//-----------------------------------------------------------------------------
// Implements CATIUpdateProvider::IsUpToDate
//-----------------------------------------------------------------------------
CATBoolean JDAPTUpdateProvider::IsUpToDate (CATBaseUnknown*  iWorkingObj , CATIDomain_var  iDomain) const
{
	//cout <<"==> Now we are in JDAPTUpdateProvider::IsUpToDate  !" << endl;
	return FALSE;
}

//-----------------------------------------------------------------------------
// Implements CATIUpdateProvider::SetUpToDate
//-----------------------------------------------------------------------------
void JDAPTUpdateProvider::SetUpToDate (CATBaseUnknown*  iWorkingObj , boolean  iFlag )
{
	//cout <<"==> Now we are in JDAPTUpdateProvider::SetUpToDate  !" << endl;
   return;
}

//-----------------------------------------------------------------------------
// Implements CATIUpdateProvider::IsInactive
//-----------------------------------------------------------------------------
int JDAPTUpdateProvider::IsInactive (CATBaseUnknown*  iWorkingObj) const
{
	//cout <<"==> Now we are in JDAPTUpdateProvider::IsInactive  !" << endl;

   return 0;
}

