// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// JDAPT3DVisuProvider.cpp
// Provide implementation to interface
//    CATI3DVisuProvider
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Apr 2009  Creation: Code generated by the CAA wizard  LuJun
//===================================================================
#include "JDAPT3DVisuProvider.h"
#include "CATIProduct.h"
#include "JDAIPTRoot.h"
#include "JDAIPTContainer.h"
#include "CATINavigateObject.h"
#include "CATIContainer.h"
#include "JDAIPTDocument.h"

#include "CATDocument.h"
#include "CATILinkableObject.h"
#include "CATIAlias.h"

#include "iostream.h"

 
CATImplementClass(JDAPT3DVisuProvider,
                  Implementation,
                  CATBaseUnknown,
                  CATnull );
 

//-----------------------------------------------------------------------------
// JDAPT3DVisuProvider : constructor
//-----------------------------------------------------------------------------
JDAPT3DVisuProvider::JDAPT3DVisuProvider():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// JDAPT3DVisuProvider : destructor
//-----------------------------------------------------------------------------
JDAPT3DVisuProvider::~JDAPT3DVisuProvider()
{
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_CATI3DVisuProvider.h"
TIE_CATI3DVisuProvider(JDAPT3DVisuProvider);


//Methods implementation

//-----------------------------------------------------------------------------
// Implements CATI3DVisuProvider::GetChildren
//-----------------------------------------------------------------------------
HRESULT JDAPT3DVisuProvider::GetChildren (CATBaseUnknown *  iObj , CATLISTP(CATBaseUnknown) **  oListChildren)
{
	//cout <<"==> Now we are in JDAPT3DVisuProvider::GetChildren  !" << endl;
	HRESULT hr=E_FAIL;
	//CATIAlias_var spAlias = iObj;
	//cout << "  ==> Object Name: " << spAlias->GetAlias() << endl;
	  
	//Get the document of the input object
	CATILinkableObject_var spLink = iObj;
	CATDocument *pDoc = spLink->GetDocument();

	//We display our objects only under the root product itself
	// if we are in a CATProduct document or under the MechanicalPart if
	// we are in a CATPart document
	CATBoolean isDisplayable;
	isDisplayable = false;

	if (pDoc->IsAKindOf("CATProduct")) {
		isDisplayable = true;
		//Check that the object does not have a father
		CATIProduct_var spProdObj = iObj;
		if (spProdObj != NULL_var) {
			CATIProduct_var spFatherProd = spProdObj->GetFatherProduct();
			if (spFatherProd != NULL_var) {
				CATIProduct_var spRefProduct=spProdObj->GetReferenceProduct();
				spLink = spRefProduct;
				pDoc = spLink->GetDocument();

				if( !(pDoc->IsAKindOf("CATProduct"))) { isDisplayable = false; }
			}
		}
	}

	if (pDoc && isDisplayable) {
		//cout <<"  ==> DISPLAYABLE"<<endl;
		//Retrieve annotation container
		JDAIPTDocument *piAnoDoc = NULL;
		CATIContainer *piCont = NULL;
		hr = pDoc->QueryInterface(IID_JDAIPTDocument, (void**)&piAnoDoc);
		if (SUCCEEDED(hr) && piAnoDoc) {
			hr = piAnoDoc->GetContainer(&piCont);
			piAnoDoc->Release(); piAnoDoc = NULL;
		}
		/*else
			cout << "  ==> Get IID_JDAIPTDocument error !" << endl;*/

		//Retrieve the applicative Root object
		JDAIPTRoot *piAnoRoot = NULL;
		if (piCont) {
			JDAIPTContainer *piAnoCont = NULL;
			hr = piCont->QueryInterface (IID_JDAIPTContainer, (void**)&piAnoCont);
			//piCont->Release(); piCont = NULL;
			if (SUCCEEDED(hr) && piAnoCont) {
				hr = piAnoCont->GetRoot(&piAnoRoot);
				piAnoCont->Release(); piAnoCont = NULL;
			}
			/*else
				cout << "  ==> Get JDAIPTContainer error !" << endl;*/
		}
		//else
			//cout << "  ==> Get JDAPT3DVisuProvider :: CATIContainer error !" << endl;

		//Add the root to the list
		if (piAnoRoot) {
			(*oListChildren) = new CATLISTP(CATBaseUnknown);
			(*oListChildren)->Append(piAnoRoot);
			hr = S_OK;
		} else {
			//cout << "  ==> Get JDAIPTRoot error !" << endl;
			hr = E_FAIL;
		}
	}  
	//cout <<"==> Now end JDAPT3DVisuProvider::GetChildren  !" << endl;
	return hr;
}

