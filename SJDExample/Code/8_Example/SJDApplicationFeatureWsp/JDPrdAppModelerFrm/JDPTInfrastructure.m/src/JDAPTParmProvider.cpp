// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// JDAPTParmProvider.cpp
// Provide implementation to interface
//    CATIParmProvider
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Apr 2009  Creation: Code generated by the CAA wizard  LuJun
//===================================================================
#include "JDAPTParmProvider.h"
#include "CATIProduct.h"
#include "JDAIPTContainer.h"
#include "JDAIPTRoot.h"
#include "CATINavigateObject.h"
#include "CATIContainer.h"
#include "JDAIPTDocument.h"
#include "CATDocument.h"
#include "CATILinkableObject.h"
//#include "CATIAlias.h"
#include "CATIPrtPart.h"
#include "iostream.h"


 
CATImplementClass(JDAPTParmProvider,
                  Implementation,
                  CATBaseUnknown,
                  CATnull );
 

//-----------------------------------------------------------------------------
// JDAPTParmProvider : constructor
//-----------------------------------------------------------------------------
JDAPTParmProvider::JDAPTParmProvider():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// JDAPTParmProvider : destructor
//-----------------------------------------------------------------------------
JDAPTParmProvider::~JDAPTParmProvider()
{
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_CATIParmProvider.h"
TIE_CATIParmProvider(JDAPTParmProvider);


//Methods implementation

//-----------------------------------------------------------------------------
// Implements CATIParmProvider::GetDirectChildren
//-----------------------------------------------------------------------------
HRESULT JDAPTParmProvider::GetDirectChildren (CATClassId  intfName , CATListValCATBaseUnknown_var*  oList , CATBaseUnknown*  iObj)
{

	//cout <<"==> Now we are in JDAPTParmProvider::GetChildren  !" << endl;

	HRESULT hr;
	hr = E_FAIL;

	//Get the document of the input object
	CATILinkableObject_var spLink = iObj;
	CATDocument *pDoc = spLink->GetDocument();
	if( !pDoc )  return hr;

	//We display our objects only under the root product itself
	// if we are in a CATProduct document or under the MechanicalPart if
	// we are in a CATPart document
	CATBoolean isDisplayable;
	isDisplayable = false;

	if (pDoc->IsAKindOf("CATProduct")) {
		isDisplayable = true;
		//Check that the object does not have father
		CATIProduct_var spProdObj = iObj;
		if (spProdObj != NULL_var) {
			CATIProduct_var spFatherProd = spProdObj->GetFatherProduct();
			if (spFatherProd != NULL_var) {   //is a sub-product
				CATIProduct_var spRefProduct=spProdObj->GetReferenceProduct();
				spLink = spRefProduct;
				pDoc = spLink->GetDocument();

				if( !(pDoc->IsAKindOf("CATProduct"))) { isDisplayable = false; }
			}
		}
	}

	if (pDoc && isDisplayable) {
		//cout <<"  ==> PUBLISHABLE"<<endl;
		//Retrieve annotation container
		JDAIPTDocument *piAnoDoc = NULL;
		CATIContainer *piCont = NULL;
		hr = pDoc->QueryInterface(IID_JDAIPTDocument, (void**)&piAnoDoc);
		if (SUCCEEDED(hr) && piAnoDoc) {
			hr = piAnoDoc->GetContainer(&piCont);
			piAnoDoc->Release(); piAnoDoc = NULL;
		}
		else
			cout << "  ==> GetIID_JDAIPTDocument error ! " << endl;

		//Retrieve the applicative Root object
		JDAIPTRoot *piAnoRoot = NULL;
		if (piCont) {
			JDAIPTContainer *piAnoCont = NULL;
			hr = piCont->QueryInterface (IID_JDAIPTContainer, (void**)&piAnoCont);
			//piCont->Release(); piCont = NULL;
			if (SUCCEEDED(hr) && piAnoCont) {
				hr = piAnoCont->GetRoot(&piAnoRoot);
				piAnoCont->Release(); piAnoCont = NULL;
			}
			else
				cout << "  ==> Get IID_JDAIPTContainer error !" << endl;
		}
		else
			cout << "  ==> Get CATIContainer error !" << endl;

		//Add the root to the list only if it implements the required interface
		hr = E_FAIL;
		if (piAnoRoot) {
			CATBaseUnknown *pItf = piAnoRoot->QueryInterface(intfName);
			if (pItf) {
				oList->Append(pItf); //list is allocated by the caller
				pItf->Release();
				pItf = NULL;
				hr = S_OK;
			}
			else
				cout << "  ==> Get CATBaseUnknown error !" << endl;
			piAnoRoot->Release();
			piAnoRoot = NULL;
		}
		else
			cout << "  ==> Get JDAIPTRoot error !" << endl;
	}
	else
		cout <<"  ==> Not PUBLISHABLE !"<<endl;

	//cout <<"==> Now end JDAPTParmProvider::GetChildren  !" << endl;
	  
	return hr;
}

