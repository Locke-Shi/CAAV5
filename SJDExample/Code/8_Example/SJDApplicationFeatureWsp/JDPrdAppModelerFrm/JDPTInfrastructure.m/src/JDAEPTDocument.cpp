// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// JDAEPTDocument.cpp
// Provide implementation to interface
//    JDAIPTDocument
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Apr 2009  Creation: Code generated by the CAA wizard  LuJun
//===================================================================
#include "JDAEPTDocument.h"

#include "CATFrmEditor.h"
#include "CATPathElement.h"

#include "CATIProduct.h"
#include "CATLISTV_CATBaseUnknown.h"

#include "CATIRedrawEvent.h"
#include "CATCreate.h"
#include "CATIDocRoots.h"
#include "CATIModelEvents.h"
#include "JDAIPTRoot.h"
#include "JDAIPTRootFactory.h"
#include "CATInit.h"
#include "CATDocument.h"
#include "CATIContainer.h"
#include "CATAppliContServices.h"

#include "iostream.h"


//#include "CATMacForIUnknown.h"

CATImplementClass(JDAEPTDocument,
                  DataExtension,
                  CATBaseUnknown,
                  CATProduct );

//CATAddClassExtension (CATPart);

//CATEndImplementClass (JDAEPTDocument);

//-----------------------------------------------------------------------------
// JDAEPTDocument : constructor
//-----------------------------------------------------------------------------
JDAEPTDocument::JDAEPTDocument():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// JDAEPTDocument : destructor
//-----------------------------------------------------------------------------
JDAEPTDocument::~JDAEPTDocument()
{
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_JDAIPTDocument.h"
TIE_JDAIPTDocument( JDAEPTDocument);


//Methods implementation

//-----------------------------------------------------------------------------
// Implements JDAIPTDocument::GetContainer
//-----------------------------------------------------------------------------
HRESULT JDAEPTDocument::GetContainer (CATIContainer ** opiContainer , CATBoolean  iCreateIfNeeded )
{
	//////////////////////////////////////////////////////////////////////////
	//We use interface CATILinkableObject to retrieve the
	//document itself
	//////////////////////////////////////////////////////////////////////////
	CATDocument *pDocument = NULL;
	CATILinkableObject_var spiLinkOnDocument = this;
	pDocument = spiLinkOnDocument->GetDocument();

	//////////////////////////////////////////////////////////////////////////
	//Retrieve applicative container if it exists
	//////////////////////////////////////////////////////////////////////////
	CATIContainer *piAnoContainer = NULL;
	HRESULT hr = ::CATGetApplicativeContainer( (CATBaseUnknown **)&piAnoContainer,
								pDocument,
								IID_CATIContainer,
								"JDAPTContainer");

	if( FAILED(hr) && iCreateIfNeeded ) {
		//////////////////////////////////////////////////////////////////////////
		//Container does not exists
		//Create a new one
		//////////////////////////////////////////////////////////////////////////
		::CATCreateApplicativeContainer( (CATBaseUnknown **)&piAnoContainer,
										 pDocument,
										 "JDAPTContainer",
										 IID_CATIContainer,
										 "CATFeatCont",
										 "JDAPTContainer");

		//////////////////////////////////////////////////////////////////////////
		//Create a AnoRoot Object
		//////////////////////////////////////////////////////////////////////////
		JDAIPTRoot *piRoot = NULL;
		if( !!piAnoContainer ) {
			JDAIPTRootFactory *piRootFactory = NULL;
			hr = piAnoContainer->QueryInterface(IID_JDAIPTRootFactory, (void**)&piRootFactory);
			if (SUCCEEDED(hr)) {
				hr = piRootFactory->CreateRoot(&piRoot);

				piRootFactory->Release(); piRootFactory = NULL;
			}
			//Root object is used later on, 
			//release done at the end of the code
		}

		//////////////////////////////////////////////////////////////////////////
		//Initialize the container:
		//    Add my Provider,Connection of events for 3D Visualization,etc.
		//////////////////////////////////////////////////////////////////////////
		CATInit_var spInitOnContainer = piAnoContainer;
		spInitOnContainer->Init(FALSE);

		if( !!piRoot ) { piRoot->Release(); piRoot = NULL; }

		hr = ::CATOmbPerformAfterContainerCreation(piAnoContainer);
	}

	if( !!piAnoContainer ) { (*opiContainer) = piAnoContainer; hr = S_OK; }
	else { hr = E_FAIL; }

	return hr;
}
