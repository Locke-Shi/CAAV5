// COPYRIGHT Dassault Systemes 2014
//===================================================================
//
// SYExcelCls.cpp
// Header definition of SYExcelCls
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2014  Creation: Code generated by the CAA wizard  ZhangYong
//===================================================================
#include "SYExcelCls.h"



COleVariant covOptional((long)DISP_E_PARAMNOTFOUND, VT_ERROR); 
 
CATImplementClass( SYExcelCls,
                   Implementation, 
                   CATBaseUnknown,
                   CATNull );
 
//-----------------------------------------------------------------------------
// SYExcelCls : constructor
//-----------------------------------------------------------------------------
SYExcelCls::SYExcelCls(/*CATUnicodeString fileFullPath*/):
    CATBaseUnknown()
{
	CoInitialize(NULL);
	if (!m_ExlApp.CreateDispatch( _T( "Excel.Application" ), NULL ) )
	{
		::MessageBox( NULL, _T( "创建Excel服务失败！" ), _T( "错误提示！" ), MB_OK | MB_ICONERROR);
		exit(1);
	}	

	bSheet = false;
	//m_ExlApp.SetVisible(FALSE); //FALSE
	//m_ExlApp.SetUserControl(TRUE);
	m_ExlApp.SetDisplayAlerts(FALSE);
}

//-----------------------------------------------------------------------------
// SYExcelCls : destructor
//-----------------------------------------------------------------------------
SYExcelCls::~SYExcelCls()
{
	m_ExlRge.ReleaseDispatch(); 

	m_ExlSheet.ReleaseDispatch(); 
	m_ExlSheets.ReleaseDispatch(); 

	m_ExlBook.ReleaseDispatch(); 
	m_ExlBooks.ReleaseDispatch(); 

	m_ExlApp.Quit(); //此句代码和下一句代码顺序不能相反，否则会造成EXCEL进程不退出
	m_ExlApp.ReleaseDispatch(); 
}
 
//-----------------------------------------------------------------------------
// SYExcelCls : copy constructor
//-----------------------------------------------------------------------------
SYExcelCls::SYExcelCls(SYExcelCls& original):
   CATBaseUnknown(original)
{
}
 
//-----------------------------------------------------------------------------
// SYExcelCls : equal operator
//-----------------------------------------------------------------------------
SYExcelCls& SYExcelCls::operator=(SYExcelCls& original)
{
   CATBaseUnknown::operator=(original);
   return *this;
}

/************************************************************************/
/*     	创建Excel文件
			sExcelFile:	Excel文件名                                                                 */
/************************************************************************/
CATBoolean SYExcelCls::CreateExcel()
{
 	m_ExlBooks.AttachDispatch(m_ExlApp.GetWorkbooks(),true);
 	m_ExlBook.AttachDispatch(m_ExlBooks.Add(covOptional));

	//得到Worksheets 
	m_ExlSheets.AttachDispatch(m_ExlBook.GetWorksheets(),true);

	////删除表 只剩下一个表
	int cout = m_ExlSheets.GetCount();
	if (cout>=2)
	{
		for (int i = cout; i>=2;i--)
		{
			m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)i)));
			m_ExlSheet.Delete();
		}
	}

	m_ExlSheet=m_ExlSheets.GetItem(COleVariant((short)1));

	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells(),TRUE);

	////设置颜色 白色
	//Interior tIterior;
	//tIterior.AttachDispatch(m_ExlRge.GetInterior());
	//tIterior.SetColor(_variant_t(RGB(255,255,255)));
	//tIterior.ReleaseDispatch();

// 	iSheetIndex = 1;
 	bSheet = TRUE;

	return TRUE;
}

/************************************************************************/
/*  //打开Excel文件                                                                    */
/************************************************************************/
CATBoolean SYExcelCls::OpenExcel(CATUnicodeString ExcelPath)
{
	//判断文件是否存在
	if( (_access(ExcelPath.ConvertToChar(), 0 )) == -1 )
	{
		cout<<"文件不存在"<<endl;
		return FALSE;
	}
	CString strFileName=ExcelPath.ConvertToChar();
	m_ExlBooks.AttachDispatch(m_ExlApp.GetWorkbooks(),true);
	m_ExlBook.AttachDispatch(m_ExlBooks.Open(strFileName, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing, vtMissing));

	//得到Worksheets 
	m_ExlSheets.AttachDispatch(m_ExlBook.GetWorksheets(),true);

	//得到活跃的sheet
	m_ExlSheet.AttachDispatch(m_ExlBook.GetActiveSheet()); 
	long index = m_ExlSheet.GetIndex();
	//SetSheet(index);
	return TRUE;
}


/************************************************************************/
/*  	创建表
		sSheetName:	表名                                                                    */
/************************************************************************/
void SYExcelCls::CreateSheet(CATUnicodeString sSheetName)
{
	m_ExlRge.AttachDispatch( m_ExlSheet.GetCells(), TRUE ); 
	CString SheetName=sSheetName.ConvertToChar();
	if (bSheet)
	{
		//第一个表
		m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(1))));
	}else{
		//不是第一个表
		m_ExlSheet.AttachDispatch(m_ExlSheets.Add(vtMissing, vtMissing, COleVariant((short)(1)), vtMissing));
	}

	bSheet = false;

	//iSheetIndex = 1;
	//设置表名
	m_ExlSheet.SetName(SheetName);
	m_ExlRge.AttachDispatch(m_ExlSheet.GetUsedRange(), TRUE);
}

/************************************************************************/
/* 执行宏命令      
	注意：直接调用宏命令有可能会引起excel报出警告，当excel的可见性为不可见时，会导致excel进程无法正常退出，需要设置excel为可见，并且手动“确定”这个警告
			为了在excle可见性为不可见的情况下正常运行。需要进行如下设置

			1，在excel编辑状态下，按alt+F11，excel弹出VB的编辑框，找到如下图的“thisworkbook”的一个标签，双击


			2，在右侧空白处复制如下内容

			Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
			ActiveWorkbook.RemovePersonalInformation = False
			End Sub

			3，复制完毕后，单击保存按钮，如有对话框弹出，选择“是”

			经过上述操作，可完美解决此问题


*/
/************************************************************************/
void SYExcelCls::RunMacro(CATUnicodeString strMacroName)
{
	CString MacroName = strMacroName.ConvertToChar();
	m_ExlApp.Run(_variant_t(MacroName),vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,
		vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,
		vtMissing,vtMissing,vtMissing,vtMissing,vtMissing,vtMissing); 
}
/************************************************************************/
/* 设置sheet表名                                                                     */
/************************************************************************/
void SYExcelCls::SetSheetName(int index,CATUnicodeString strName)
{
	CString sheetName = strName.ConvertToChar();
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(index))));
	m_ExlSheet.SetName(sheetName);
}

/************************************************************************/
/*//得到sheet表名称*/
/************************************************************************/
CATUnicodeString SYExcelCls::GetSheetName(int index)
{
	CATUnicodeString strName;
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(index))));
	CString strSheetName = m_ExlSheet.GetName();

	strName.BuildFromUTF16(strSheetName.GetBuffer(strSheetName.GetLength()), strSheetName.GetLength());
	strSheetName.ReleaseBuffer();
	return strName;
}
/************************************************************************/
/* 得到某一个sheet的索引                                                                     */
/************************************************************************/
int SYExcelCls::GetSheetIndex(CATUnicodeString strSheetName)
{
	int index;
	int icount = GetSheetCount();
	for (int i = 1;i<=icount;i++)
	{
		CATUnicodeString strName = GetSheetName(i);
		if (strName == strSheetName)
		{
			index = i;
			break;
		}
	}
	return index;
}
/************************************************************************/
/* 移动sheet到指定位置
*/
/************************************************************************/
void SYExcelCls::MoveSheetToPos(int SheetIndex,int MoveToPos)
{
	_Worksheet m_ExlSheetPos;
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(SheetIndex))));
	m_ExlSheetPos.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(MoveToPos))));
	m_ExlSheet.Move(vtMissing,_variant_t(m_ExlSheetPos));
}
/************************************************************************/
/* 设置sheet为当前sheet                                                                     */
/************************************************************************/
void SYExcelCls::SetCurrentSheet(CATUnicodeString strSheetName)
{
	int icount = GetSheetCount();
	for (int i = 1;i<=icount;i++)
	{
		CATUnicodeString strName = GetSheetName(i);
		if (strName == strSheetName)
		{
			m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(i))));
			m_ExlSheet.Activate();
		}
	}
}
/************************************************************************/
/*  写某一个sheet的某些单元格                                                              */
/************************************************************************/
void SYExcelCls::WriteSheetCellsData(int sheetIndex,long iRowStart, long iColStart,long iRowEnd, long iColEnd, CATListOfCATUnicodeString &LstValue,int Type)
{
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(sheetIndex))));
	m_ExlSheet.Activate();
	WriteData(iRowStart,iColStart,iRowEnd,iColEnd, LstValue,Type);
}
/************************************************************************/
/* Copy sheet    拷贝模板   copy的参数 只能指定一个，不能同时指定，
										即：m_ExlSheet.Copy(_variant_t(m_ExlSheet),vtMissing)
										或者：m_ExlSheet.Copy(vtMissing,_variant_t(m_ExlSheet))
*/
/************************************************************************/
void SYExcelCls::CopySheet(int sheetIndex)
{
 	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(sheetIndex))));
 	m_ExlSheet.Activate();
	m_ExlSheet.Copy(_variant_t(m_ExlSheet),vtMissing);
}
/************************************************************************/
/* Delete sheet 
/************************************************************************/
void SYExcelCls::DeleteSheet(int sheetIndex)
{
	m_ExlApp.SetDisplayAlerts(FALSE);
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(sheetIndex))));
	m_ExlSheet.Activate();
	m_ExlSheet.Delete();
	m_ExlApp.SetDisplayAlerts(TRUE);
}
/************************************************************************/
/*        设置某个sheet的某些单元格黑线框                                                              */
/************************************************************************/
void SYExcelCls::SetSheetCellBorderAround(int sheetIndex,long iStartRow,long iStartCol,long iEndRow,long iEndCol)
{
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(sheetIndex))));
	m_ExlSheet.Activate();
	SetCellBorderAround(iStartRow,iStartCol,iEndRow,iEndCol);
}
/************************************************************************/
/* 得到某个sheet已经使用的行数
*/
int SYExcelCls::GetSheetUsedRows(int sheetIndex)
{
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(sheetIndex))));
	m_ExlSheet.Activate();
	return  GetUsedRowNum();
}
/************************************************************************/
/* 得到某个sheet已经使用的列数
*/
int SYExcelCls::GetSheetUsedCols(int sheetIndex)
{
	//m_ExlSheets.AttachDispatch(m_ExlBook.GetWorksheets(),true);
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(sheetIndex))));
	m_ExlSheet.Activate();
	return  GetUsedColNum();
}
/************************************************************************/
/************************************************************************/
/* 得到当前workbook中含有多少个sheet
*/
int SYExcelCls::GetSheetCount()
{
	//得到Worksheets 
	m_ExlSheets.AttachDispatch(m_ExlBook.GetWorksheets(),true);
	return m_ExlSheets.GetCount();
}
/************************************************************************/
/************************************************************************/
/* 修改某一个sheet表的某个单元格的值
*/
void SYExcelCls::UpdateSheetCellData(int sheetIndex,long iRowIndex, long iColIndex, CATUnicodeString Value)
{
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(sheetIndex))));
	m_ExlSheet.Activate();
	WriteCellData(iRowIndex,iColIndex,Value);
}
/************************************************************************/
/* 得到某一个sheet的某一个单元格的值                                                                     */
/************************************************************************/
CATUnicodeString SYExcelCls::GetSheetCellData(int sheetIndex,long iRowIndex, long iColIndex)
{
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(sheetIndex))));
	m_ExlSheet.Activate();
	return ReadOneCellValue(iRowIndex,iColIndex);
}
/************************************************************************/
/************************************************************************/
/* //从某一行某一列开始连续在此行（不跨行跨列）写入数值                                                                     */
/************************************************************************/
void SYExcelCls::WriteRowData(long iRow, long iColIndex, CATListOfCATUnicodeString &LstValue)
{
	Range sRange;
	sRange.AttachDispatch( m_ExlSheet.GetCells(), TRUE ); 
	int iValNum=LstValue.Size();
	int  k = 1;
	for(long i=iColIndex;i<=(iColIndex+iValNum-1);i++)
	{
		CString strValue=(LstValue[k]).ConvertToChar();
		sRange.SetItem(_variant_t(iRow),_variant_t(i),_variant_t(strValue)); 
		k++;
	}
	sRange.ReleaseDispatch();
}


/************************************************************************/
/*    //从某一行某一列开始连续在此行（跨行不跨列）写入数值                                                                  */
/************************************************************************/
void SYExcelCls::WriteColData(long iRowIndex, long iCol, CATListOfCATUnicodeString &LstValue)
{
	m_ExlRge.AttachDispatch( m_ExlSheet.GetCells(), TRUE ); 
	int iValNum=LstValue.Size();
	int  k = 1;
	for(long i=iRowIndex;i<=(iRowIndex+iValNum-1);i++)
	{
		CString strValue=(LstValue[k]).ConvertToChar();
		m_ExlRge.SetItem(_variant_t(i),_variant_t(iCol),_variant_t(strValue)); 
		k++;
	}
}

/************************************************************************/
/* 从某一行某一列开始连续（跨行跨列）写入数值 ::一行一行的写入 或者一列一列的写入                                                               */
/************************************************************************/
void SYExcelCls::WriteData(long iRowStart, long iColStart,long iRowEnd, long iColEnd, CATListOfCATUnicodeString &LstValue,int Type)
{
	m_ExlRge.AttachDispatch( m_ExlSheet.GetCells(), TRUE ); 
	//一行一行的写入
	if (Type == 1)
	{
		int stepN = 0;
		int step = iColEnd-iColStart + 1;
		for (long i =iRowStart;i<=iRowEnd;i++ )
		{
			for (long j = iColStart;j<=iColEnd;j++)
			{
				CString strValue=(LstValue[stepN * step +(j - iColStart + 1)]).ConvertToChar();
				m_ExlRge.SetItem(_variant_t(i),_variant_t(j),_variant_t(strValue)); 
			}
			stepN++;
		}
	}

	//一列一列的写入
	if (Type == 2)
	{
		int stepN = 0; 
		int step = iRowEnd - iRowStart + 1;
		for (long j = iColStart;j<=iColEnd;j++)
		{
			for (long i = iRowStart;i<=iRowEnd;i++)
			{
				CString strValue = (LstValue[stepN*step + (i - iRowStart + 1)]).ConvertToChar();
				m_ExlRge.SetItem(_variant_t(i),_variant_t(j),_variant_t(strValue)); 
			}
		}
		stepN ++;
	}
}


/************************************************************************/
/*  写某一个单元格的值                                                                    */
/************************************************************************/
void SYExcelCls::WriteCellData(long iRowIndex, long iColIndex, CATUnicodeString Value)
{
	CString strValue=Value.ConvertToChar();
	m_ExlRge.AttachDispatch( m_ExlSheet.GetCells(), TRUE ); 
	m_ExlRge.SetItem(_variant_t(iRowIndex),_variant_t(iColIndex),_variant_t(strValue)); 
}

/************************************************************************/
/* 获得已经使用的行数                                                                     */
/************************************************************************/
int SYExcelCls::GetUsedRowNum()
{
	Range usedRange;
	usedRange.AttachDispatch(m_ExlSheet.GetUsedRange());
	m_ExlRge.AttachDispatch(usedRange.GetRows());
	long iRowNum=m_ExlRge.GetCount();  
	usedRange.ReleaseDispatch();
	return (int)iRowNum;
}
/************************************************************************/
/* 设置使用过的单元格黑线框                                                                     */
/************************************************************************/
void SYExcelCls::SetCellBorderAround(long iStartRow,long iStartCol,long iEndRow,long iEndCol)
{
	Range usedRange;
	usedRange.AttachDispatch(m_ExlSheet.GetUsedRange());

	for (long i = iStartRow;i<=iEndRow;i++)
	{
		for (long j = iStartCol;j<=iEndCol;j++)
		{
		 	CString strs;strs.Format(_T("%c%d"),'A' + j -1,i);
		 	CString strT = strs + ":" +strs;

			usedRange.AttachDispatch(m_ExlSheet.GetRange(_variant_t(strT.GetBuffer()), vtMissing), true);
			//usedRange.Select();
			usedRange.BorderAround(_variant_t((long)1),_variant_t((long)2),_variant_t((long)-4105),vtMissing);
		}
	}
	usedRange.AttachDispatch(m_ExlSheet.GetRange(_variant_t("A1:A1"), vtMissing), true);
	usedRange.Select();
	usedRange.ReleaseDispatch();
}

/************************************************************************/
/* 获得已经使用的列数                                                                     */
/************************************************************************/
int SYExcelCls::GetUsedColNum()
{
	Range usedRange;
	usedRange.AttachDispatch(m_ExlSheet.GetUsedRange());
	m_ExlRge.AttachDispatch(usedRange.GetColumns());
	long iColNum=m_ExlRge.GetCount();  
	usedRange.ReleaseDispatch();
	return (int)iColNum;
}

/************************************************************************/
/* 获得已经使用的行数的起始行                                                                     */
/************************************************************************/
int SYExcelCls::GetUsedRowStart()
{
	Range usedRange;
	usedRange.AttachDispatch(m_ExlSheet.GetUsedRange());
	long iStartRow=usedRange.GetRow(); 
	usedRange.ReleaseDispatch();
	return (int)iStartRow;
}
/************************************************************************/
/*     获得已经使用的列数的起始列                                                                  */
/************************************************************************/
int SYExcelCls::GetUsedColStart()
{
	Range usedRange;
	usedRange.AttachDispatch(m_ExlSheet.GetUsedRange());
	long iStartCol=usedRange.GetColumn();  
	usedRange.ReleaseDispatch();
	return (int)iStartCol;
}
/************************************************************************/
/* 读某一个单元格的值                                                                     */
/************************************************************************/
CATUnicodeString SYExcelCls::ReadOneCellValue(long iRow,long iCol)
{
	m_ExlRge.AttachDispatch( m_ExlSheet.GetCells(), TRUE ); 
	Range   oCurCell;
	oCurCell.AttachDispatch( m_ExlRge.GetItem( COleVariant( iRow), COleVariant( iCol ) ).pdispVal,TRUE );
	CString strItemValue;
	CATUnicodeString strNewValue;
	VARIANT vResult =oCurCell.GetText();

	strItemValue=vResult.bstrVal;
	strNewValue.BuildFromUTF16(strItemValue.GetBuffer(strItemValue.GetLength()), strItemValue.GetLength());
	strItemValue.ReleaseBuffer();
	oCurCell.ReleaseDispatch();

	return strNewValue;
}
/************************************************************************/
/* 从某一行某一列读取此行的N列值                                                            */
/************************************************************************/
void SYExcelCls::ReadRowData(long iRow,long iColIndex,long iColNum,CATListOfCATUnicodeString &oLstValue)
{
	for (long i = iColIndex ;i<= iColIndex + iColNum -1;i++ )
	{
		CATUnicodeString strValue = ReadOneCellValue(iRow,i);
		oLstValue.Append(strValue);
	}
}
//得到某个sheet的某些单元格的值
void SYExcelCls::GetSheetCellsData(int sheetIndex,long iRowStart, long iColStart,long iRowEnd, long iColEnd, CATListOfCATUnicodeString &LstValue,int Type)
{
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(sheetIndex))));
	m_ExlSheet.Activate();

	CATListOfCATUnicodeString LstiRowsData;
	
	if (Type == 1)//一行一行的读
	{
		int iColNum = iColEnd - iColStart + 1;
		for (int i = iRowStart;i<=iRowEnd;i++)
		{
			LstiRowsData.RemoveAll();
			ReadRowData(i,iColStart,iColNum,LstiRowsData);
			LstValue.Append(LstiRowsData);
		}
	}
	if (Type == 2)//一列一列的读
	{
		int iRowNum = iRowEnd - iRowStart + 1;
		for (int i = iColStart;i<=iColEnd;i++)
		{
			LstiRowsData.RemoveAll();
			ReadColData(i,iRowStart,iRowNum,LstiRowsData);
			LstValue.Append(LstiRowsData);
		}
	}
}
/************************************************************************/
/*  从某一行某一列读取此列的N行值                                                                    */
/************************************************************************/
//void SYExcelCls::ReadColData(long iRowIndex,long iRowNum,long iCol,CATListOfCATUnicodeString &oLstValue)
void SYExcelCls::ReadColData(long iCol, long iRowIndex,long iRowNum,CATListOfCATUnicodeString &oLstValue)
{
	for (long i = iRowIndex;i<= iRowIndex +iRowNum -1;i++)
	{
		CATUnicodeString strValue = ReadOneCellValue(i,iCol);
		oLstValue.Append(strValue);
	}
}
/************************************************************************/
/* 设置某一个单元格的字体颜色      
名称 （中/英文）         十六进制格式             RGB格式
LightPink	浅粉色	#FFB6C1	255,182,193
Pink	粉红	#FFC0CB	255,192,203
Crimson	猩红	#DC143C	220,20,60
LavenderBlush	脸红的淡紫色	#FFF0F5	255,240,245
PaleVioletRed	苍白的紫罗兰红色	#DB7093	219,112,147
HotPink	热情的粉红	#FF69B4	255,105,180
DeepPink	深粉色	#FF1493	255,20,147
MediumVioletRed	适中的紫罗兰红色	#C71585	199,21,133
Orchid	兰花的紫色	#DA70D6	218,112,214
Thistle	蓟	#D8BFD8	216,191,216
plum	李子	#DDA0DD	221,160,221
Violet	紫罗兰	#EE82EE	238,130,238
Magenta	洋红	#FF00FF	255,0,255
Fuchsia	灯笼海棠（紫红色）	#FF00FF	255,0,255
DarkMagenta	深洋红色	#8B008B	139,0,139
Purple	紫色	#800080	128,0,128
MediumOrchid	适中的兰花紫	#BA55D3	186,85,211
DarkVoilet	深紫罗兰色	#9400D3	148,0,211
DarkOrchid	深兰花紫	#9932CC	153,50,204
Indigo	靛青	#4B0082	75,0,130
BlueViolet	深紫罗兰的蓝色	#8A2BE2	138,43,226
MediumPurple	适中的紫色	#9370DB	147,112,219
MediumSlateBlue	适中的板岩暗蓝灰色	#7B68EE	123,104,238
SlateBlue	板岩暗蓝灰色	#6A5ACD	106,90,205
DarkSlateBlue	深岩暗蓝灰色	#483D8B	72,61,139
Lavender	薰衣草花的淡紫色	#E6E6FA	230,230,250
GhostWhite	幽灵的白色	#F8F8FF	248,248,255
Blue	纯蓝	#0000FF	0,0,255
MediumBlue	适中的蓝色	#0000CD	0,0,205
MidnightBlue	午夜的蓝色	#191970	25,25,112
DarkBlue	深蓝色	#00008B	0,0,139
Navy	海军蓝	#000080	0,0,128
RoyalBlue	皇军蓝	#4169E1	65,105,225
CornflowerBlue	矢车菊的蓝色	#6495ED	100,149,237
LightSteelBlue	淡钢蓝	#B0C4DE	176,196,222
LightSlateGray	浅石板灰	#778899	119,136,153
SlateGray	石板灰	#708090	112,128,144
DoderBlue	道奇蓝	#1E90FF	30,144,255
AliceBlue	爱丽丝蓝	#F0F8FF	240,248,255
SteelBlue	钢蓝	#4682B4	70,130,180
LightSkyBlue	淡蓝色	#87CEFA	135,206,250
SkyBlue	天蓝色	#87CEEB	135,206,235
DeepSkyBlue	深天蓝	#00BFFF	0,191,255
LightBLue	淡蓝	#ADD8E6	173,216,230
PowDerBlue	火药蓝	#B0E0E6	176,224,230
CadetBlue	军校蓝	#5F9EA0	95,158,160
Azure	蔚蓝色	#F0FFFF	240,255,255
LightCyan	淡青色	#E1FFFF	225,255,255
PaleTurquoise	苍白的绿宝石	#AFEEEE	175,238,238
Cyan	青色	#00FFFF	0,255,255
Aqua	水绿色	#00FFFF	0,255,255
DarkTurquoise	深绿宝石	#00CED1	0,206,209
DarkSlateGray	深石板灰	#2F4F4F	47,79,79
DarkCyan	深青色	#008B8B	0,139,139
Teal	水鸭色	#008080	0,128,128
MediumTurquoise	适中的绿宝石	#48D1CC	72,209,204
LightSeaGreen	浅海洋绿	#20B2AA	32,178,170
Turquoise	绿宝石	#40E0D0	64,224,208
Auqamarin	绿玉\碧绿色	#7FFFAA	127,255,170
MediumAquamarine	适中的碧绿色	#00FA9A	0,250,154
MediumSpringGreen	适中的春天的绿色	#F5FFFA	245,255,250
MintCream	薄荷奶油	#00FF7F	0,255,127
SpringGreen	春天的绿色	#3CB371	60,179,113
SeaGreen	海洋绿	#2E8B57	46,139,87
Honeydew	蜂蜜	#F0FFF0	240,255,240
LightGreen	淡绿色	#90EE90	144,238,144
PaleGreen	苍白的绿色	#98FB98	152,251,152
DarkSeaGreen	深海洋绿	#8FBC8F	143,188,143
LimeGreen	酸橙绿	#32CD32	50,205,50
Lime	酸橙色	#00FF00	0,255,0
ForestGreen	森林绿	#228B22	34,139,34
Green	纯绿	#008000	0,128,0
DarkGreen	深绿色	#006400	0,100,0
Chartreuse	查特酒绿	#7FFF00	127,255,0
LawnGreen	草坪绿	#7CFC00	124,252,0
GreenYellow	绿黄色	#ADFF2F	173,255,47
OliveDrab	橄榄土褐色	#556B2F	85,107,47
Beige	米色（浅褐色）	#6B8E23	107,142,35
LightGoldenrodYellow	浅秋麒麟黄	#FAFAD2	250,250,210
Ivory	象牙	#FFFFF0	255,255,240
LightYellow	浅黄色	#FFFFE0	255,255,224
Yellow	纯黄	#FFFF00	255,255,0
Olive	橄榄	#808000	128,128,0
DarkKhaki	深卡其布	#BDB76B	189,183,107
LemonChiffon	柠檬薄纱	#FFFACD	255,250,205
PaleGodenrod	灰秋麒麟	#EEE8AA	238,232,170
Khaki	卡其布	#F0E68C	240,230,140
Gold	金	#FFD700	255,215,0
Cornislk	玉米色	#FFF8DC	255,248,220
GoldEnrod	秋麒麟	#DAA520	218,165,32
FloralWhite	花的白色	#FFFAF0	255,250,240
OldLace	老饰带	#FDF5E6	253,245,230
Wheat	小麦色	#F5DEB3	245,222,179
Moccasin	鹿皮鞋	#FFE4B5	255,228,181
Orange	橙色	#FFA500	255,165,0
PapayaWhip	番木瓜	#FFEFD5	255,239,213
BlanchedAlmond	漂白的杏仁	#FFEBCD	255,235,205
NavajoWhite	Navajo白	#FFDEAD	255,222,173
AntiqueWhite	古代的白色	#FAEBD7	250,235,215
Tan	晒黑	#D2B48C	210,180,140
BrulyWood	结实的树	#DEB887	222,184,135
Bisque	（浓汤）乳脂，番茄等	#FFE4C4	255,228,196
DarkOrange	深橙色	#FF8C00	255,140,0
Linen	亚麻布	#FAF0E6	250,240,230
Peru	秘鲁	#CD853F	205,133,63
PeachPuff	桃色	#FFDAB9	255,218,185
SandyBrown	沙棕色	#F4A460	244,164,96
Chocolate	巧克力	#D2691E	210,105,30
SaddleBrown	马鞍棕色	#8B4513	139,69,19
SeaShell	海贝壳	#FFF5EE	255,245,238
Sienna	黄土赭色	#A0522D	160,82,45
LightSalmon	浅鲜肉（鲑鱼）色	#FFA07A	255,160,122
Coral	珊瑚	#FF7F50	255,127,80
OrangeRed	橙红色	#FF4500	255,69,0
DarkSalmon	深鲜肉（鲑鱼）色	#E9967A	233,150,122
Tomato	番茄	#FF6347	255,99,71
MistyRose	薄雾玫瑰	#FFE4E1	255,228,225
Salmon	鲜肉（鲑鱼）色	#FA8072	250,128,114
Snow	雪	#FFFAFA	255,250,250
LightCoral	淡珊瑚色	#F08080	240,128,128
RosyBrown	玫瑰棕色	#BC8F8F	188,143,143
IndianRed	印度红	#CD5C5C	205,92,92
Red	纯红	#FF0000	255,0,0
Brown	棕色	#A52A2A	165,42,42
FireBrick	耐火砖	#B22222	178,34,34
DarkRed	深红色	#8B0000	139,0,0
Maroon	栗色	#800000	128,0,0
White	纯白	#FFFFFF	255,255,255
WhiteSmoke	白烟	#F5F5F5	245,245,245
Gainsboro	Gainsboro	#DCDCDC	220,220,220
LightGrey	浅灰色	#D3D3D3	211,211,211
Silver	银白色	#C0C0C0	192,192,192
DarkGray	深灰色	#A9A9A9	169,169,169
Gray	灰色	#808080	128,128,128
DimGray	暗淡的灰色	#696969	105,105,105
Black	纯黑	#000000	0,0,0

color = 0xFF0000;
color = RGB(100, 100, 100);

*/
/************************************************************************/
void SYExcelCls::SetCellFontColor(long iRow,long iCol,COLORREF color)
{
	Font font;
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (COleVariant(iRow), COleVariant(iCol))).pdispVal,TRUE);
	//m_ExlRge.Select();
	font.AttachDispatch(m_ExlRge.GetFont());

	font.SetColorIndex(_variant_t((long)color));
	font.ReleaseDispatch();
}

/************************************************************************/
/* 设置某一行的颜色                                                                     */
/************************************************************************/
void SYExcelCls::SetRowFontColor(long iRow,COLORREF color)
{
	Font font;
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (COleVariant(iRow), vtMissing)).pdispVal,TRUE);
	//m_ExlRge.Select();
	font.AttachDispatch(m_ExlRge.GetFont());

	font.SetColorIndex(_variant_t((long)color));
	font.ReleaseDispatch();
}
/************************************************************************/
/* 设置某一列的颜色                                                                     */
/************************************************************************/
void SYExcelCls::SetColFontColor(long iCol,COLORREF color)
{
	Font font;
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (vtMissing, COleVariant(iCol))).pdispVal,TRUE);
	//m_ExlRge.Select();
	font.AttachDispatch(m_ExlRge.GetFont());

	font.SetColorIndex(_variant_t((long)color));
	font.ReleaseDispatch();
}

/************************************************************************/
/* 设置某个单元格的字体大小                                                                     */
/************************************************************************/
void SYExcelCls::SetCellFontSize(long iRow,long iCol,int iFontSize)
{
	Font font;
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (COleVariant(iRow), COleVariant(iCol))).pdispVal,TRUE);
	//m_ExlRge.Select();
	font.AttachDispatch(m_ExlRge.GetFont());

	font.SetSize(_variant_t((long)iFontSize));
	font.ReleaseDispatch();
}
/************************************************************************/
/* 设置某行字体大小                                                                     */
/************************************************************************/
void SYExcelCls::SetRowFontSize(long iRow,int iFontSize)
{
	Font font;
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (COleVariant(iRow), vtMissing)).pdispVal,TRUE);
	//m_ExlRge.Select();
	font.AttachDispatch(m_ExlRge.GetFont());

	font.SetSize(_variant_t((long)iFontSize));
	font.ReleaseDispatch();
}

/************************************************************************/
/* 设置某列的字体大小                                                                     */
/************************************************************************/
void SYExcelCls::SetColFontSize(long iCol,int iFontSize)
{
	Font font;
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (vtMissing, COleVariant(iCol))).pdispVal,TRUE);
	//m_ExlRge.Select();
	font.AttachDispatch(m_ExlRge.GetFont());

	font.SetSize(_variant_t((long)iFontSize));
	font.ReleaseDispatch();
}

/************************************************************************/
/* 设置某个单元格的字体是否为粗体                                                                     */
/************************************************************************/
void SYExcelCls::SetCellFontBold(long iRow,long iCol,bool bBold)
{
	Font font;
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (COleVariant(iRow), COleVariant(iCol))).pdispVal,TRUE);
	//m_ExlRge.Select();
	font.AttachDispatch(m_ExlRge.GetFont());

	font.SetBold(_variant_t(true));
	font.ReleaseDispatch();
}
/************************************************************************/
/* 设置某行的字体是否为粗体                                                                     */
/************************************************************************/
void SYExcelCls::SetRowFontBold(long iRow,bool bBold)
{
	Font font;
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (COleVariant(iRow), vtMissing)).pdispVal,TRUE);
	//m_ExlRge.Select();
	font.AttachDispatch(m_ExlRge.GetFont());

	font.SetBold(_variant_t(true));
	font.ReleaseDispatch();
}
/************************************************************************/
/* 设置某列的字体是否为粗体                                                                     */
/************************************************************************/
void SYExcelCls::SetColFontBold(long iCol,bool bBold)
{
	Font font;
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (vtMissing, COleVariant(iCol))).pdispVal,TRUE);
	//m_ExlRge.Select();
	font.AttachDispatch(m_ExlRge.GetFont());

	font.SetBold(_variant_t(true));
	font.ReleaseDispatch();
}
/************************************************************************/
/* 设置单元格水平对齐方式              
vResult:
1:      //默认
-4108:  //居中
-4131 : //靠左
-4152 : //靠右
*/
/************************************************************************/
void SYExcelCls::SetHCellAlignStye(long iRow,long iCol,long hResult)
{
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (COleVariant(iRow), COleVariant(iCol))).pdispVal,TRUE);
	//m_ExlRge.Select();
	m_ExlRge.SetHorizontalAlignment(_variant_t(hResult));
}
/************************************************************************/
/* 设置某行的水平对齐格式                                                                     */
/************************************************************************/
void SYExcelCls::SetHRowAlignStye(long iRow,long hResult)
{
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (COleVariant(iRow), vtMissing)).pdispVal,TRUE);
	//m_ExlRge.Select();
	m_ExlRge.SetHorizontalAlignment(_variant_t(hResult));
}
/************************************************************************/
/* 设置某列的水平对齐格式                                                                     */
/************************************************************************/
void SYExcelCls::SetHColAlignStye(long iCol,long hResult)
{
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (vtMissing, COleVariant(iCol))).pdispVal,TRUE);
	m_ExlRge.SetHorizontalAlignment(_variant_t(hResult));
}
/************************************************************************/
/* 设置某列的某些单元格水平对齐格式                                                                     */
/************************************************************************/
void SYExcelCls::SetHColCellsAlignStye(long iCol,long iStartRow,long iEndRow,long hResult)
{
	CString strStart;strStart.Format(_T("%c%d"),'A' + iCol -1,iStartRow);
	CString strEnd;strEnd.Format(_T("%c%d"),'A' + iCol -1,iEndRow);
	CString strT = strStart + ":" + strEnd;

	m_ExlRge.AttachDispatch(m_ExlSheet.GetRange(_variant_t(strT.GetBuffer()), vtMissing), true);
	m_ExlRge.SetHorizontalAlignment(_variant_t(hResult));
}
/************************************************************************/
/* 设置某列的某些单元格垂直对齐格式                                                                     */
/************************************************************************/
void SYExcelCls::SetVColCellsAlignStye(long iCol,long iStartRow,long iEndRow,long vResult)
{
	CString strStart;strStart.Format(_T("%c%d"),'A' + iCol -1,iStartRow);
	CString strEnd;strEnd.Format(_T("%c%d"),'A' + iCol -1,iEndRow);
	CString strT = strStart + ":" + strEnd;

	m_ExlRge.AttachDispatch(m_ExlSheet.GetRange(_variant_t(strT.GetBuffer()), vtMissing), true);
	m_ExlRge.SetVerticalAlignment(_variant_t(vResult));
	
}
/************************************************************************/
/* 设置某些单元格格式        (小数点保留位数  文本 数值 货币 ......)                                                             */
/************************************************************************/
void SYExcelCls::SetRangeFormatLocal(long iStartRow,long iStartCol,long iEndRow,long iEndCol,CATUnicodeString DecimalDigits)
{
	CString strStart;strStart.Format(_T("%c%d"),'A' + iStartCol -1,iStartRow);
	CString strEnd;strEnd.Format(_T("%c%d"),'A' + iEndCol -1,iEndRow);
	CString strT = strStart + ":" + strEnd;

	CString Decimal = DecimalDigits.ConvertToChar();
	m_ExlRge.AttachDispatch(m_ExlSheet.GetRange(_variant_t(strT.GetBuffer()), vtMissing), true);
	m_ExlRge.SetNumberFormatLocal(_variant_t(Decimal));
}
/************************************************************************/
/* 设置某个sheet 某些单元格格式                                                               */
/************************************************************************/
void SYExcelCls::SetSheetRangeFormat(int sheetIndex,long iStartRow,long iStartCol,long iEndRow,long iEndCol,CATUnicodeString DecimalDigits)
{
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(sheetIndex))));
	m_ExlSheet.Activate();
	SetRangeFormatLocal(iStartRow,iStartCol,iEndRow,iEndCol,DecimalDigits);
}
/************************************************************************/
/* 设置单元格垂直对齐方式              
vResult:
-4160 :  //靠上
-4108 :  //居中
-4107 :  //靠下
*/
/************************************************************************/
void SYExcelCls::SetVCellAlignStye(long iRow,long iCol,long vResult)
{
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (COleVariant(iRow), COleVariant(iCol))).pdispVal,TRUE);
	m_ExlRge.SetVerticalAlignment(_variant_t(vResult));
}
/************************************************************************/
/* 设置某行的垂直对齐方式                                                                     */
/************************************************************************/
void SYExcelCls::SetVRowAlignStye(long iRow,long vResult)
{
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (COleVariant(iRow), vtMissing)).pdispVal,TRUE);
	m_ExlRge.SetVerticalAlignment(_variant_t(vResult));
}
/************************************************************************/
/* 设置某列的垂直对齐方式                                                                     */
/************************************************************************/
void SYExcelCls::SetVColAlignStye(long iCol,long vResult)
{
	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells());
	m_ExlRge.AttachDispatch((m_ExlRge.GetItem (vtMissing, COleVariant(iCol))).pdispVal,TRUE);
	m_ExlRge.SetVerticalAlignment(_variant_t(vResult));
}
/************************************************************************/
/* 设置某行的某些单元格水平对齐格式                                                                     */
/************************************************************************/
void SYExcelCls::SetHRowCellsAlignStye(long iRow,long iStartCol,long iEndCol,long hResult)
{
	CString strStart;strStart.Format(_T("%c%d"),'A' + iStartCol -1,iRow);
	CString strEnd;strEnd.Format(_T("%c%d"),'A' + iEndCol -1,iRow);
	CString strT = strStart + ":" + strEnd;

	m_ExlRge.AttachDispatch(m_ExlSheet.GetRange(_variant_t(strT.GetBuffer()), vtMissing), true);
	m_ExlRge.SetHorizontalAlignment(_variant_t(hResult));
}
/************************************************************************/
/* 设置某行的某些单元格垂直对齐格式                                                                     */
/************************************************************************/
void SYExcelCls::SetVRowCellsAlignStye(long iRow,long iStartCol,long iEndCol,long vResult)
{
	CString strStart;strStart.Format(_T("%c%d"),'A' + iStartCol -1,iRow);
	CString strEnd;strEnd.Format(_T("%c%d"),'A' + iEndCol -1,iRow);
	CString strT = strStart + ":" + strEnd;

	m_ExlRge.AttachDispatch(m_ExlSheet.GetRange(_variant_t(strT.GetBuffer()), vtMissing), true);
	m_ExlRge.SetVerticalAlignment(_variant_t(vResult));
}
/************************************************************************/
/* 合并单元格                                                                     */
/************************************************************************/
//void SYExcelCls::MergeCells(long iRowStart,long iColStart,long iRowEnd,long iColEnd)
//{
//	//行号转变数字字符串 列号转变 A B C ...
//	CString strStart;strStart.Format(_T("%c%d"),'A' + iColStart -1,iRowStart);
//	CString strEnd;strEnd.Format(_T("%c%d"),'A' + iColEnd -1,iRowEnd);
//	CString strT = strStart + ":" + strEnd;
//
//	m_ExlRge.AttachDispatch(m_ExlSheet.GetRange(_variant_t(strT.GetBuffer()), vtMissing), true);
//
//	COleVariant varTrue((short)TRUE,VT_BOOL);
//	m_ExlRge.Merge(varTrue);
//	m_ExlRge.BorderAround(_variant_t((long)1),_variant_t((long)2),_variant_t((long)-4105),vtMissing);
//}
void SYExcelCls::MergeCells(long iRowStart,long iColStart,long iRowEnd,long iColEnd)
{
	//行号转变数字字符串 列号转变 A B C ...
	CString strStart;strStart.Format(_T("%c%d"),'A' + iColStart -1,iRowStart);
	CString strEnd;strEnd.Format(_T("%c%d"),'A' + iColEnd -1,iRowEnd);
	//CString strT = strStart + ":" + strEnd;

	//cout<<"strT："<<strT<<endl;


	//m_ExlRge.AttachDispatch(m_ExlSheet.GetRange(_variant_t(strT.GetBuffer()), vtMissing), true);

	//int strint = 64;

	//strint +=iColStart;
	//cout<<"strA："<<(char)strint<<endl;

	//CATUnicodeString strStart="A2";
	//m_ExlRge.AttachDispatch(m_ExlSheet.GetRange(_variant_t("A2"),_variant_t("A3")),TRUE);
	m_ExlRge.AttachDispatch(m_ExlSheet.GetRange(_variant_t(strStart.GetBuffer()),_variant_t(strEnd.GetBuffer())),TRUE);

	//COleVariant varTrue((short)TRUE,VT_BOOL);
	m_ExlRge.Merge(_variant_t(0));
	m_ExlRge.BorderAround(_variant_t((long)1),_variant_t((long)2),_variant_t((long)-4105),vtMissing);
}
//-------------------------------------------------------------------------
//MergeCells()
//-------------------------------------------------------------------------
void SYExcelCls::MergeCell(CString iRowStart,CString iColStart,CString iRowEnd,CString iColEnd)
{
	//行号转变数字字符串 
	CString strStart = iColStart+iRowStart;
	CString strEnd = iColEnd + iRowEnd;
	CString strT = strStart + ":" + strEnd;

	m_ExlRge.AttachDispatch(m_ExlSheet.GetRange(_variant_t(strT.GetBuffer()), vtMissing), true);

	COleVariant varTrue((short)TRUE,VT_BOOL);
	m_ExlRge.Merge(varTrue);
	m_ExlRge.BorderAround(_variant_t((long)1),_variant_t((long)2),_variant_t((long)-4105),vtMissing);
}
// /************************************************************************/
// /* 增加行 当前行向下移动*/
// /************************************************************************/
 void SYExcelCls::InsertRows(long iRow)
 {
 	Range tRange;
 
	CString str;
	str.Format(_T("%d%d"),iRow,iRow);
	CString strT = str +":" +str;
	
 
 	tRange.AttachDispatch(m_ExlRge.GetRange(_variant_t(strT.GetBuffer()), vtMissing), true);
 //	tRange.Select();
 
 	tRange.Insert(vtMissing,_variant_t(1));
 	tRange.ReleaseDispatch();
 }

// /************************************************************************/
// /* 增加列 当前列向后移动*/
// /************************************************************************/
 void SYExcelCls::InsertCols(long iCol)
 {
 	Range tRange;
 
	CString str;
	str.Format(_T("%d%d"),iCol,iCol);
	CString strT = str +":" +str;

 	tRange.AttachDispatch(m_ExlRge.GetRange(vtMissing, _variant_t(strT.GetBuffer())), true);
 //	tRange.Select();
 
 	tRange.Insert(vtMissing,_variant_t(1));
 	tRange.ReleaseDispatch();
 }


/************************************************************************/
/* 写公式*/
/************************************************************************/
void SYExcelCls::WriteFormula(long iRow,long iCol,CATUnicodeString formula )
{
	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetItem(_variant_t(iRow), _variant_t(iCol)).pdispVal, true);

	CString pszText = formula.ConvertToChar();

	tRange.SetFormula(COleVariant(pszText));
	tRange.ReleaseDispatch();
}


/************************************************************************/
/* 设定列宽 
iColumn:	指定列
iWidth:		宽度
*/
/************************************************************************/
void SYExcelCls::SetColWidth(long iColumn, float iWidth)
{
	Range tRange;

	tRange.AttachDispatch(m_ExlRge.GetItem(vtMissing, _variant_t(iColumn)).pdispVal, true);
	if(iWidth>=255)
	{
		//列宽不能超过255
		iWidth=255;
	}
	//设置列宽
	tRange.SetColumnWidth(_variant_t(iWidth));
	tRange.ReleaseDispatch();
}
/************************************************************************/
/* 设定行高
iRow:	指定行
iHeight:		高度
*/
/************************************************************************/
void SYExcelCls::SetRowHeight(long iRow, float iHeight)
{
	Range tRange;
	//tRange.AttachDispatch(m_ExlRge.GetItem(_variant_t(iRow),vtMissing).pdispVal, true);
	if(iHeight>=409)
	{
		//行高不能超过409
		iHeight=409;
	}
	tRange.AttachDispatch(m_ExlRge.GetItem(_variant_t(iRow),_variant_t(1)).pdispVal, true);
	//设置行高
	tRange.SetRowHeight(_variant_t(iHeight));
	tRange.ReleaseDispatch();
}

/************************************************************************/
/* 得到列宽 
iColumn:	指定列
iWidth:		宽度
*/
/************************************************************************/
void SYExcelCls::GetColWidth(long iColumn, float &iWidth)
{
	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetItem(vtMissing, _variant_t(iColumn)).pdispVal, true);
	//得到列宽
	_variant_t m_vt = tRange.GetColumnWidth();
	::VariantChangeType(&m_vt, &m_vt, 0, VT_R4);
	iWidth = m_vt.fltVal;
	tRange.ReleaseDispatch();
}

/************************************************************************/
/* 得到行高
iRow:	指定行
iHeight:		高度
*/
/************************************************************************/
void SYExcelCls::GetRowHeight(long iRow, float &iHeight)
{
	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetItem(_variant_t(iRow),vtMissing).pdispVal, true);
	//得到行高
	_variant_t m_vt = tRange.GetRowHeight();
	::VariantChangeType(&m_vt, &m_vt, 0, VT_R4);
	iHeight = m_vt.fltVal;
	tRange.ReleaseDispatch();
}

/************************************************************************/
/* 设置单元格的宽高值                                                                     */
/************************************************************************/
void SYExcelCls::SetCellHeightWidth(long iRow,long iCol,float iHeight,float iWidth)
{
	Range tRange;

	tRange.AttachDispatch(m_ExlRge.GetItem(_variant_t(iRow),_variant_t(iCol) ).pdispVal, true);
	//设置行高
	tRange.SetRowHeight(_variant_t(iHeight));
	//设置列宽
	tRange.SetColumnWidth(_variant_t(iWidth));
	tRange.ReleaseDispatch();
}

/************************************************************************/
/* 设置自动换行                                                                     */
/************************************************************************/
void SYExcelCls::SetAutoWrap(long iRow, long iColumn)
{
	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetItem(_variant_t((long)iRow), _variant_t((long)iColumn)).pdispVal, true);
	COleVariant varTrue((short)TRUE,VT_BOOL);
	tRange.SetWrapText(varTrue);
	tRange.ReleaseDispatch();
}
/************************************************************************/
/* 设置所有单元格自动调整列宽或者行高 或者全调整                                                                   */
/************************************************************************/
void SYExcelCls::AllCellAutoFit(int Fillstye)
{
	//选择所有列
	Range range;
	range.AttachDispatch(m_ExlSheet.GetCells());

	if (Fillstye == 1)//自动调整行
	{
		Range range1;
		range1.AttachDispatch(range.GetColumns());
		range1.AutoFit();
		range1.ReleaseDispatch();
	}
	if (Fillstye == 2)//自动调整列
	{
		Range range1;
		range1.AttachDispatch(range.GetRows());
		range1.AutoFit();
		range1.ReleaseDispatch();
	}
	if (Fillstye == 3)//自动调整行列
	{
		Range range1,range2;
		range1.AttachDispatch(range.GetRows());
		range1.AutoFit();
		range1.ReleaseDispatch();

		range2.AttachDispatch(range.GetColumns());
		range2.AutoFit();
		range2.ReleaseDispatch();
	}
	range.ReleaseDispatch();

	//取消选中所有（即选中任意一个单元格即可）
	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetItem(_variant_t((long)1), _variant_t((long)(1))).pdispVal, true);
	tRange.Select();
	tRange.ReleaseDispatch();
}

/************************************************************************/
/* 设置边框                    
//SetBorders(4, 1, iRow, 8, true, true, true, true, true, true, xlMedium, xlMedium, xlMedium, xlMedium, xlThin, xlThin)

xlThin 2		// 细线
xlMedium -4138	// 粗线
xlThick 4		//粗粗线

// 线的样式：0- no line; 1-solid; 2-big dot;3-small dot;4-dash dot; 5-dash dot dot;

*/
/************************************************************************/
//void SYExcelCls::SetBorders(long iStartRow, long iStartColumn, long iEndRow, long iEndColumn,// 指定的单元格
//													bool bLeft, bool bTop, bool bRight, bool bBottom,				// 指定的四个边
//													bool bInsideVertical, bool bInsideHorizontal,					// 内部边框
//													long Left_LineType, long Top_LineType, long Right_LineType, long Bottom_LineType, // 四个边的线类型
//													long InsideVertical_LineType, long InsideHorizontal_LineType	// 内部边框的线类型
//													)
//{
//	iStartColumn += 'A' - 1;
//	iEndColumn += 'A' - 1;
//
//	CString start;start.Format(_T("%c%d"),iStartColumn,iStartRow);
//	CString end;end.Format(_T("%c%d"),iEndColumn,iEndRow);
//
//	CString strT = start + ":" + end;
//	
//	Range tRange;
//	tRange.AttachDispatch(m_ExlRge.GetRange(_variant_t(strT.GetBuffer()), vtMissing), true);
//	//tRange.Select();
//
//	//为四周和内部加上边框
//	Borders tBorders;
//	Border tBorder;
//	tBorders.AttachDispatch(tRange.GetBorders());
//
//	// 置空
//	tBorder.AttachDispatch(tBorders.GetItem((long)5));
//	tBorder.SetLineStyle(_variant_t((long)-4105));
//	tBorder.ReleaseDispatch();
//
//	tBorder.AttachDispatch(tBorders.GetItem((long)5));
//	tBorder.SetLineStyle(_variant_t((long)-4105));
//	tBorder.ReleaseDispatch();
//
//	// Left
//	if (bLeft)
//	{
//		tBorder.AttachDispatch(tBorders.GetItem((long)7));
//		tBorder.SetLineStyle(_variant_t((long)1));
//		tBorder.SetWeight(_variant_t(Left_LineType));
//		tBorder.SetColorIndex(_variant_t((long)-4105));
//		tBorder.ReleaseDispatch();
//	}
//
//	// Top
//	if (bTop)
//	{
//		tBorder.AttachDispatch(tBorders.GetItem((long)8));
//		tBorder.SetLineStyle(_variant_t((long)1));
//		tBorder.SetWeight(_variant_t(Top_LineType));
//		tBorder.SetColorIndex(_variant_t((long)-4105));
//		tBorder.ReleaseDispatch();
//	}
//
//	// Right
//	if (bRight)
//	{
//		tBorder.AttachDispatch(tBorders.GetItem((long)10));
//		tBorder.SetLineStyle(_variant_t((long)1));
//		tBorder.SetWeight(_variant_t(Right_LineType));
//		tBorder.SetColorIndex(_variant_t((long)-4105));
//		tBorder.ReleaseDispatch();
//	}
//
//	// Bottom
//	if (bBottom)
//	{
//		tBorder.AttachDispatch(tBorders.GetItem((long)9));
//		tBorder.SetLineStyle(_variant_t((long)1));
//		tBorder.SetWeight(_variant_t(Bottom_LineType));
//		tBorder.SetColorIndex(_variant_t((long)-4105));
//		tBorder.ReleaseDispatch();
//	}
//
//	// InsideVertical
//	if ((iEndColumn - iStartColumn) > 1 && bInsideVertical)
//	{
//		tBorder.AttachDispatch(tBorders.GetItem((long)11));
//		tBorder.SetLineStyle(_variant_t((long)1));
//		tBorder.SetWeight(_variant_t(InsideVertical_LineType));
//		tBorder.SetColorIndex(_variant_t((long)-4105));
//		tBorder.ReleaseDispatch();
//	}
//
//	// InsideHorizontal
//	if ((iEndRow - iStartRow) > 1 && bInsideHorizontal)
//	{
//		tBorder.AttachDispatch(tBorders.GetItem((long)12));
//		tBorder.SetLineStyle(_variant_t((long)1));
//		tBorder.SetWeight(_variant_t(InsideHorizontal_LineType));
//		tBorder.SetColorIndex(_variant_t((long)-4105));
//		tBorder.ReleaseDispatch();
//	}
//
//	tBorders.ReleaseDispatch();
//	tRange.ReleaseDispatch();
//
//	//取消选中所有列（即选中任意一个单元格即可）
//	tRange.AttachDispatch(m_ExlRge.GetItem(_variant_t((long)1), _variant_t((long)(1))).pdispVal, true);
//	tRange.Select();
//	tRange.ReleaseDispatch();
//}

void SYExcelCls::SetBorders(long iStartRow, long iStartColumn, long iEndRow, long iEndColumn,// 指定的单元格
													bool bLeft, bool bTop, bool bRight, bool bBottom,				// 指定的四个边
													bool bInsideVertical, bool bInsideHorizontal,					// 内部边框
													long Left_LineType, long Top_LineType, long Right_LineType, long Bottom_LineType, // 四个边的线类型
													long InsideVertical_LineType, long InsideHorizontal_LineType	// 内部边框的线类型
													)
{
	//CString strStart;
	//strStart.Format(_T("%c%d"),'A' + iStartColumn -1,iStartRow);

	//CString strEnd;
	//strEnd.Format(_T("%c%d"),'A' + iEndColumn -1,iEndRow);

	//iStartColumn += 'A' - 1;
	//iEndColumn += 'A' - 1;

	CString start;
	//start.Format(_T("%c%d"),iStartColumn,iStartRow);
	start.Format(_T("%c%d"),'A' + iStartColumn -1,iStartRow);

	CString end;
	end.Format(_T("%c%d"),iEndColumn,iEndRow);
	end.Format(_T("%c%d"),'A' + iEndColumn -1,iEndRow);

	//CString strT = start + ":" + end;
	
	Range tRange;
	//tRange.AttachDispatch(m_ExlRge.GetRange(_variant_t(strT.GetBuffer()), vtMissing), true);
	tRange.AttachDispatch(m_ExlRge.GetRange(_variant_t(start.GetBuffer()),_variant_t(end.GetBuffer())),TRUE);

	//tRange.Select();

	//为四周和内部加上边框
	Borders tBorders;
	Border tBorder;
	tBorders.AttachDispatch(tRange.GetBorders());

	// 置空
	tBorder.AttachDispatch(tBorders.GetItem((long)5));
	tBorder.SetLineStyle(_variant_t((long)-4105));
	tBorder.ReleaseDispatch();

	tBorder.AttachDispatch(tBorders.GetItem((long)5));
	tBorder.SetLineStyle(_variant_t((long)-4105));
	tBorder.ReleaseDispatch();

	// Left
	if (bLeft)
	{
		tBorder.AttachDispatch(tBorders.GetItem((long)7));
		tBorder.SetLineStyle(_variant_t((long)1));
		tBorder.SetWeight(_variant_t(Left_LineType));
		tBorder.SetColorIndex(_variant_t((long)-4105));
		tBorder.ReleaseDispatch();
	}

	// Top
	if (bTop)
	{
		tBorder.AttachDispatch(tBorders.GetItem((long)8));
		tBorder.SetLineStyle(_variant_t((long)1));
		tBorder.SetWeight(_variant_t(Top_LineType));
		tBorder.SetColorIndex(_variant_t((long)-4105));
		tBorder.ReleaseDispatch();
	}

	// Right
	if (bRight)
	{
		tBorder.AttachDispatch(tBorders.GetItem((long)10));
		tBorder.SetLineStyle(_variant_t((long)1));
		tBorder.SetWeight(_variant_t(Right_LineType));
		tBorder.SetColorIndex(_variant_t((long)-4105));
		tBorder.ReleaseDispatch();
	}

	// Bottom
	if (bBottom)
	{
		tBorder.AttachDispatch(tBorders.GetItem((long)9));
		tBorder.SetLineStyle(_variant_t((long)1));
		tBorder.SetWeight(_variant_t(Bottom_LineType));
		tBorder.SetColorIndex(_variant_t((long)-4105));
		tBorder.ReleaseDispatch();
	}

	// InsideVertical
	if ((iEndColumn - iStartColumn) > 1 && bInsideVertical)
	{
		tBorder.AttachDispatch(tBorders.GetItem((long)11));
		tBorder.SetLineStyle(_variant_t((long)1));
		tBorder.SetWeight(_variant_t(InsideVertical_LineType));
		tBorder.SetColorIndex(_variant_t((long)-4105));
		tBorder.ReleaseDispatch();
	}

	// InsideHorizontal
	if ((iEndRow - iStartRow) > 1 && bInsideHorizontal)
	{
		tBorder.AttachDispatch(tBorders.GetItem((long)12));
		tBorder.SetLineStyle(_variant_t((long)1));
		tBorder.SetWeight(_variant_t(InsideHorizontal_LineType));
		tBorder.SetColorIndex(_variant_t((long)-4105));
		tBorder.ReleaseDispatch();
	}

	tBorders.ReleaseDispatch();
	tRange.ReleaseDispatch();

	//取消选中所有列（即选中任意一个单元格即可）
	tRange.AttachDispatch(m_ExlRge.GetItem(_variant_t((long)1), _variant_t((long)(1))).pdispVal, true);
	tRange.Select();
	tRange.ReleaseDispatch();

	//m_ExlRge.BorderAround(_variant_t((long)1),_variant_t((long)2),_variant_t((long)-4105),vtMissing);
}

void SYExcelCls::SetBorders(long iStartRow, long iStartColumn, long iEndRow, long iEndColumn)
{
	for(int i=1;i<=iEndRow;i++)
	{
		for(int j=1;j<=iEndColumn;j++)
		{
			CString strStart;strStart.Format(_T("%c%d"),'A' + j -1,i);
			CString strEnd;strEnd.Format(_T("%c%d"),'A' + j -1,i);
			m_ExlRge.AttachDispatch(m_ExlSheet.GetRange(_variant_t(strStart.GetBuffer()),_variant_t(strEnd.GetBuffer())),TRUE);

			//m_ExlRge.Merge(_variant_t(0));
			m_ExlRge.BorderAround(_variant_t((long)1),_variant_t((long)2),_variant_t((long)-4105),vtMissing);
		}
	}

	
}
/************************************************************************/
/* 创建图表                       
// CreatChartObjects(0, 0, 400, 400, "A:A,C:C,E:E,F:F", "标题", "X轴", "Y轴");
*/
/************************************************************************/
void SYExcelCls::CreatChartObjects(double dLeft, double dTop, double dWidth, double dHeight, // 图标的位置和大小
																CString strDataSourceRange,
																CString strTitle,
																CString strX,
																CString strY
																)
{
	ChartObjects  tChartobjects;
	tChartobjects.AttachDispatch(m_ExlSheet.ChartObjects(covOptional));
	
	// 创建图表位置和大小
	ChartObject tChartobject = tChartobjects.Add(dLeft, dTop, dWidth, dHeight);

	_Chart tChart;
	tChart.AttachDispatch(tChartobject.GetChart());

	// 图表的数据来源、范围
	Range range;
	// 数据源 -                         选中多个不连续的列 "A:A,C:C,E:E,F:F"
	range.AttachDispatch(m_ExlRge.GetRange(_variant_t(strDataSourceRange), vtMissing));

	// 设置数据源
	tChart.SetSourceData(range, COleVariant((long)2));

	// 设置图表类型 - 柱形
	tChart.SetChartType((long)51);

	// 显示图例(右侧的信息)
	tChart.SetHasLegend(TRUE);
	Legend legend;
	legend.AttachDispatch(tChart.GetLegend());
	legend.SetPosition((long)2);
	legend.DetachDispatch();

	// 设置图表标题
	tChart.SetHasTitle(TRUE);
	ChartTitle chartTitle;
	chartTitle.AttachDispatch(tChart.GetChartTitle());

	// 设置字体
	Font font;
	font.AttachDispatch(chartTitle.GetFont());
	font.SetBold(_variant_t(TRUE));
	font.SetSize(_variant_t((long)15));
	font.DetachDispatch();

	chartTitle.SetCaption(strTitle);
	chartTitle.DetachDispatch();

	// 设置x轴
	CAxis axis;
	CAxisTitle axisTitle;
	axis.AttachDispatch(tChart.Axes(COleVariant((long)1), (long)1));
	axis.put_HasTitle(TRUE);

	// 设置字体 - x轴坐标文字
	TickLabels tickLabels;
	tickLabels.AttachDispatch(axis.get_TickLabels());
	font.AttachDispatch(tickLabels.GetFont());
	font.SetSize(_variant_t((long)4));
	font.SetColorIndex(_variant_t((long)3));
	font.DetachDispatch();
	tickLabels.DetachDispatch();

	// x轴文本
	axisTitle.AttachDispatch(axis.get_AxisTitle());
	font.AttachDispatch(axisTitle.get_Font());
	font.SetSize(_variant_t((long)8));
	font.DetachDispatch();
	axisTitle.put_Text(strX);
	axisTitle.DetachDispatch();
	axis.DetachDispatch();

	// 设置y轴
	axis.AttachDispatch(tChart.Axes(_variant_t((long)2), (long)1));
	axis.put_HasTitle(TRUE);

	// 设置字体 - y轴坐标文字
	tickLabels.AttachDispatch(axis.get_TickLabels());
	tickLabels.SetAutoScaleFont(_variant_t(TRUE));
	font.AttachDispatch(tickLabels.GetFont());
	font.SetSize(_variant_t((long)6));
	font.SetColorIndex(_variant_t((long)4));
	font.DetachDispatch();
	tickLabels.DetachDispatch();

	// 设置y轴名称
	axisTitle.AttachDispatch(axis.get_AxisTitle());
	font.AttachDispatch(axisTitle.get_Font());
	font.SetSize(_variant_t((long)8));
	font.DetachDispatch();
	axisTitle.put_Text(strY);
	axisTitle.DetachDispatch();
	axis.DetachDispatch();

	range.DetachDispatch();

	// 设置1号柱形图的颜色 索引由1开始
	Series series;
	series.AttachDispatch(tChart.SeriesCollection(_variant_t((long)1)));

	//设置填充色
	Interior interior;
	interior.AttachDispatch(series.GetInterior());
	interior.SetColorIndex(_variant_t((long)3));
	interior.DetachDispatch();
	series.DetachDispatch();

	tChart.DetachDispatch();
	tChartobject.DetachDispatch();
	tChartobjects.DetachDispatch();
}
/************************************************************************/
/* 冻结行                                                                     */
/************************************************************************/
void SYExcelCls::LineFreezePanes(long iRow)
{
	CString str = "A";
	CString strN;strN.Format(_T("%d"),iRow);
	CString strT = str + strN;

	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetRange(COleVariant(strT), COleVariant(strT)));
	//tRange.Select();
	
	Window tWindow;
	tWindow.AttachDispatch(m_ExlApp.GetActiveWindow());
	tWindow.SetFreezePanes(true);
	tWindow.ReleaseDispatch();

	tRange.ReleaseDispatch();
}
/************************************************************************/
/* 设置某行的填充色   
COLORREF color= RGB(xxx, xxx, xxx);  
BYTE RVal = GetRValue(color);
BYTE GVal = GetGValue(color);
BYTE GVal = GetBValue(color); 
*/
/************************************************************************/
void SYExcelCls::SetRowFillColor(long iRow,COLORREF color)
{
	CString str = "A";
	CString strN;strN.Format(_T("%d"),iRow);
	CString strT = str + strN;

	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetRange(COleVariant(strT), vtMissing));
	//tRange.Select();

	Interior interior;
	interior.AttachDispatch(tRange.GetInterior());
	color = (long)interior.GetColor().dblVal;//获取颜色
	interior.SetColor(_variant_t(color)); //

	tRange.ReleaseDispatch();
	interior.ReleaseDispatch();
}
/************************************************************************/
/* 设置某列的填充色   
COLORREF color= RGB(xxx, xxx, xxx);
BYTE RVal = GetRValue(color);
BYTE GVal = GetGValue(color);
BYTE GVal = GetBValue(color); 
*/
/************************************************************************/
void SYExcelCls::SetColFillColor(long iCol,COLORREF color)
{
	iCol += 'A' - 1;
	CString strT;strT.Format(_T("%c%d"),iCol,1);

	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetRange(COleVariant(strT), vtMissing));
	//tRange.Select();

	Interior interior;
	interior.AttachDispatch(tRange.GetInterior());
	color = (long)interior.GetColor().dblVal;//获取颜色
	interior.SetColor(_variant_t(color)); //

	tRange.ReleaseDispatch();
	interior.ReleaseDispatch();

}
/************************************************************************/
/* 设置某单元格的填充色         
COLORREF color= RGB(xxx, xxx, xxx);
BYTE RVal = GetRValue(color);
BYTE GVal = GetGValue(color);
BYTE GVal = GetBValue(color); 
*/
/************************************************************************/
void SYExcelCls::SetRangeFillColor(long iRow,long iCol,COLORREF color)
{
	iCol += 'A' - 1;

	CString strs;
	strs.Format(_T("%c%d"),iCol,iRow);
	CString strT = strs + ":" + strs;

	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetRange(COleVariant(strT), vtMissing));
	//tRange.Select();

	Interior interior;
	interior.AttachDispatch(tRange.GetInterior());
	color = (long)interior.GetColor().dblVal;//获取颜色
	interior.SetColor(_variant_t(color)); //

	tRange.ReleaseDispatch();
	interior.ReleaseDispatch();
}
/************************************************************************/
/* 设置某些单元格的填充色         
COLORREF color= RGB(xxx, xxx, xxx);
BYTE RVal = GetRValue(color);
BYTE GVal = GetGValue(color);
BYTE GVal = GetBValue(color); 
*/
/************************************************************************/
void SYExcelCls::SetSomeRangeFillColor(long iStartRow,long iStartCol,long iEndRow,long iEndCol,COLORREF color)
{
	iStartCol += 'A' - 1;
	iEndCol += 'A' - 1;
	CString strS;strS.Format(_T("%c%d"),iStartCol,iStartRow);
	CString strE;strE.Format(_T("%c%d"),iEndCol,iEndRow);
	CString strT = strS + ":" + strE;

	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetRange(COleVariant(strT), vtMissing));
	//tRange.Select();

	Interior interior;
	interior.AttachDispatch(tRange.GetInterior());
	color = (long)interior.GetColor().dblVal;//获取颜色
	interior.SetColor(_variant_t(color)); //

	tRange.ReleaseDispatch();
	interior.ReleaseDispatch();
}
/************************************************************************/
/* 插入图片
特别注意：行高范围(0~409) 不同的excel可以通过全选单元格 右键->行高进行设置检查行高范围。超过此范围报错
				0<iRowHeight<=409
				列宽范围（0~255）不同的excel可以通过选择某一列，右键->列宽进行设置检查列宽范围。超过会报错
				0<iColWidth<=255
				实际目测距离：高度的1/4值为宽度时，目测图片宽高“相等”
*/
/************************************************************************/
void SYExcelCls::InsertPictures(long iRow,long iCol,float iRowHeight,float iColWidth,CATUnicodeString iPicturePath, float iRowOffSet, float iColOffSet)
{
	iCol += 'A' - 1;

	CString strs;
	strs.Format(_T("%c%d"),iCol,iRow);
	CString strT = strs + ":" + strs;

	//获得要插入图片的单元Range
	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetRange(COleVariant(strT), vtMissing));

	//cout<<tRange .GetLeft().dblVal<<"--"<<(float)tRange .GetLeft().dblVal+iColOffSet<<endl;
	//cout<<tRange .GetTop().dblVal<<"--"<<(float)tRange .GetTop().dblVal+iRowOffSet<<endl;
	//tRange.SetRowHeight(_variant_t(iRowHeight));//设置行高，列宽 
	//tRange.SetColumnWidth(_variant_t(iColWidth));

	Shapes tShapes;
	tShapes.AttachDispatch(m_ExlSheet.GetShapes());
	//tShapes.AddPicture(iPicturePath,false,true,(float)tRange .GetLeft().dblVal,(float)tRange .GetTop().dblVal,(float)tRange .GetWidth().dblVal, (float)tRange .GetHeight().dblVal);// 从本地添加一个图片
	tShapes.AddPicture(iPicturePath,false,true,(float)tRange .GetLeft().dblVal+iColOffSet,(float)tRange .GetTop().dblVal+iRowOffSet,(float)iColWidth, (float)iRowHeight);

	//ShapeRange   tShapeRange;
	//tShapeRange.AttachDispatch(tShapes.GetRange(_variant_t(long(1))),TRUE);
	//tShapeRange.SetHeight((float)tRange.GetHeight().dblVal);   //设置图片宽度 高度 和单元格宽高度保持一致
	//tShapeRange.SetWidth((float)tRange.GetWidth().dblVal);  

	//tShapeRange.ReleaseDispatch();
	tShapes.ReleaseDispatch();
	tRange.ReleaseDispatch();
}

/************************************************************************/
/*读取合并的单元格信息                                                                      */
/************************************************************************/
void SYExcelCls::GetMergeAreaInfo(long iRow, long iColumn, long& MergeRowCount, long& MergeColumnCount, long& MergeStartRow, long& MergeStartColumn)
{
	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetItem(_variant_t((long)iRow), _variant_t((long)(iColumn))).pdispVal, true);

	Range unionRange;
	unionRange.AttachDispatch(tRange.GetMergeArea());

	//合并单元格的行数
	Range mergeAreaRange_HangCount;
	mergeAreaRange_HangCount.AttachDispatch(unionRange.GetRows());
	MergeRowCount = mergeAreaRange_HangCount.GetCount();
	mergeAreaRange_HangCount.ReleaseDispatch();

	//合并单元格的列数
	Range mergeAreaRange_LieCount;
	mergeAreaRange_LieCount.AttachDispatch(unionRange.GetColumns());
	MergeColumnCount = mergeAreaRange_LieCount.GetCount();
	mergeAreaRange_LieCount.ReleaseDispatch();

	//起始行，从1开始
	MergeStartRow = unionRange.GetRow();
	//起始列，从1开始
	MergeStartColumn = unionRange.GetColumn();

	unionRange.ReleaseDispatch();
	tRange.ReleaseDispatch();
}
///************************************************************************/
///* 删除列                                                                     */
///************************************************************************/
void SYExcelCls::DeleteCol(long iCol)
{
	Range tRange;
	tRange.AttachDispatch(m_ExlSheet.GetCells());
	tRange.AttachDispatch(tRange.GetItem(covOptional,COleVariant(iCol)).pdispVal);
	tRange.AttachDispatch(tRange.GetEntireColumn());
	tRange.Delete(COleVariant((short)-4159));
	tRange.ReleaseDispatch();
}
///************************************************************************/
///* 删除行                                                                     */
///************************************************************************/
void SYExcelCls::DeleteRow(long iRow)
{
	/*Range tRange;
	tRange.AttachDispatch(m_ExlSheet.GetCells());
	tRange.AttachDispatch(tRange.GetItem(COleVariant(iRow),covOptional).pdispVal);
	tRange.AttachDispatch(tRange.GetEntireRow());
	tRange.Delete(COleVariant((short)-4162));
	tRange.ReleaseDispatch();*/

	LPDISPATCH lpDisp;
	CString rowC ;
	rowC.Format(_T("%d"), iRow);
	rowC = "A" + rowC ;
	lpDisp = m_ExlSheet.GetRange(COleVariant(rowC),COleVariant(rowC));
	ASSERT(lpDisp);
	m_ExlRge.AttachDispatch(lpDisp);
	lpDisp = m_ExlRge.GetEntireRow() ;
	m_ExlRge.AttachDispatch(lpDisp);
	m_ExlRge.Delete(COleVariant((long)1));
}

/************************************************************************/
/* 保存                                                                 */
/************************************************************************/
void SYExcelCls::SaveExcelFile(CString savePath,bool bOpenTemp)
{
	if (bOpenTemp)
	{
		m_ExlBook.SaveAs(COleVariant(savePath),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			0,
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing));
	}
	else
	{
		m_ExlBook.Save();
	}
	m_ExlBook.SetSaved(TRUE);
	m_ExlBook.Close(covOptional, COleVariant(savePath), covOptional);
	m_ExlBooks.Close();
}

/************************************************************************/
/* 关闭                                                                */
/************************************************************************/
void SYExcelCls::CloseExcelFile(CString savePath)
{
	//m_ExlBook.SetSaved(TRUE);
	//m_ExlBook.Close(covOptional, COleVariant(savePath), covOptional);
	m_ExlBooks.Close();
}

/************************************************************************/
/* 保存为文本                                                                 */
/************************************************************************/
void SYExcelCls::SaveTextFile(CString savePath,bool bOpenTemp)
{
	if (bOpenTemp)
	{
		m_ExlBook.SaveAs(COleVariant(savePath),
			_variant_t((short)42),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			0,
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing),
			_variant_t(vtMissing));
	}
	else
	{
		m_ExlBook.Save();
	}
	m_ExlBook.SetSaved(TRUE);
	m_ExlBook.Close(covOptional, COleVariant(savePath), covOptional);
	m_ExlBooks.Close();
}

//-------------------------------------------------------------------------
//下载单元格图片到本地路径
//-------------------------------------------------------------------------
void SYExcelCls::DownloadPicuture( int iSheetIndex, int iRow, int iCol, CATUnicodeString istrFileSavePath )
{
	//获取指定单元格
	m_ExlSheet.AttachDispatch(m_ExlSheets.GetItem(COleVariant((short)(iSheetIndex))));
	m_ExlSheet.Activate();

	m_ExlRge.AttachDispatch(m_ExlSheet.GetCells()); 

	Range tRange;
	tRange.AttachDispatch(m_ExlRge.GetItem(_variant_t(iRow), _variant_t(iCol)).pdispVal);

	//获取单元格合并数量
	long MergeRowCount = 1;
	long MergeColumnCount = 1;
	long MergeStartRow = iRow;
	long MergeStartColumn = iCol;
	GetMergeAreaInfo(iRow, iCol, MergeRowCount, MergeColumnCount, MergeStartRow, MergeStartColumn);

	long endCol = iCol+MergeColumnCount-1;
	long endRow = iRow+MergeRowCount-1;

	//获取当前sheet中的所有图片
	Shapes tShapes;
	tShapes.AttachDispatch(m_ExlSheet.GetShapes());
	long lShapeCount = tShapes.GetCount();
	for (int i =1; i <=lShapeCount; i++)
	{
		Shape tShape;
		tShape.AttachDispatch(tShapes.Item(_variant_t(i)));
		if (tShape.GetType() == 13)//13代表图片
		{
			Range topLeftRangeOfShape;
			Range bottomRightRangeOfShape;
			topLeftRangeOfShape.AttachDispatch(tShape.GetTopLeftCell());
			bottomRightRangeOfShape.AttachDispatch(tShape.GetBottomRightCell());

			long lStartRowOfShape = topLeftRangeOfShape.GetRow();
			long lEndRowOfShape = bottomRightRangeOfShape.GetRow();
			long lStartColOfShape = topLeftRangeOfShape.GetColumn();
			long lEndColOfShape = bottomRightRangeOfShape.GetColumn();

			//取出单元格中图片
			if (iRow <=lStartRowOfShape && endRow >=lEndRowOfShape
				&& iCol <=lStartColOfShape && endCol >=lEndColOfShape)
			{
				tShape.Copy();
				ChartObjects chartObjects;
				chartObjects.AttachDispatch(m_ExlSheet.ChartObjects(_variant_t(vtMissing)));
				ChartObject tChartobject = chartObjects.Add(tShape.GetLeft(), tShape.GetTop(), tShape.GetWidth(), tShape.GetHeight());

				_Chart _chart;
				_chart.AttachDispatch((tChartobject.GetChart()));
				_chart.Paste(_variant_t(vtMissing));
				
				_chart.Export((LPCTSTR)istrFileSavePath, _variant_t(vtMissing), _variant_t(vtMissing));
				ChartObjects fatherChartObjects = _chart.GetParent();
				fatherChartObjects.Delete();

				return;//只取第一张图片
			}
		}
	}
}
