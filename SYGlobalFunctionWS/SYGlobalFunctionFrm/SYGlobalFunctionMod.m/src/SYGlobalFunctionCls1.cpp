// COPYRIGHT Dassault Systemes 2020
//===================================================================
//
// SYGlobalFunctionCls1.cpp
// Header definition of SYGlobalFunctionCls1
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  May 2020  Creation: Code generated by the CAA wizard  ShiYi
//===================================================================
#include "SYGlobalFunctionCls1.h"
 
CATImplementClass( SYGlobalFunctionCls1,
                   Implementation, 
                   CATBaseUnknown,
                   CATNull );
 
//-----------------------------------------------------------------------------
// SYGlobalFunctionCls1 : constructor
//-----------------------------------------------------------------------------
SYGlobalFunctionCls1::SYGlobalFunctionCls1():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// SYGlobalFunctionCls1 : destructor
//-----------------------------------------------------------------------------
SYGlobalFunctionCls1::~SYGlobalFunctionCls1()
{
}
 
//-----------------------------------------------------------------------------
// SYGlobalFunctionCls1 : copy constructor
//-----------------------------------------------------------------------------
SYGlobalFunctionCls1::SYGlobalFunctionCls1(SYGlobalFunctionCls1& original):
   CATBaseUnknown(original)
{
}
 
//-----------------------------------------------------------------------------
// SYGlobalFunctionCls1 : equal operator
//-----------------------------------------------------------------------------
SYGlobalFunctionCls1& SYGlobalFunctionCls1::operator=(SYGlobalFunctionCls1& original)
{
   CATBaseUnknown::operator=(original);
   return *this;
}
 
//测试文件是否存在_1
//输入：istrPathOrFile - 文件名（路径+文件名）
//输出：true - 存在， false - 不存在
bool SYGlobalFunctionCls1::TestFileExistence(CATUnicodeString istrPathOrFile)
{
	bool bisCun=false;
	if(istrPathOrFile.GetLengthInChar() <=0)return bisCun;

	do 
	{
		if((_access(istrPathOrFile.ConvertToChar(),0)) != -1) 
		{
			//存在
			bisCun=true;
			break;
		}

	} while (1);

	return bisCun;
}

//测试文件是否存在_2
//输入：istrPathOrFile - 文件名（路径+文件名) ,iovertime - 时间
//输出：true - 存在， false - 不存在
bool TestExistence(CATUnicodeString istrPathOrFile,double iovertime)
{
	bool bisCun=false;
	if(istrPathOrFile.GetLengthInChar() <=0)return bisCun;

	CATTime time1;
	do 
	{
		if((_access(istrPathOrFile.ConvertToChar(),0)) != -1) 
		{
			//存在
			bisCun=true;
			break;
		}

		CATTime time2;
		CATTimeSpan timespan=time2-time1;
		if(timespan.GetTotalSeconds() >= iovertime)
		{
			return bisCun;
		}
	} while (1);

	return bisCun;
}

//获取程序Bin目录
//输入：模块DLL名称(模块名+后缀)
//输出：oBinPath - 所在路径,bool - 
bool SYGlobalFunctionCls1::GetCurrentBinPath(CATUnicodeString istrDllPath,CATUnicodeString& oBinPath)
{
	//获得dll句柄
	HINSTANCE hinstance = ::GetModuleHandle(istrDllPath);

	//获得dll路径
	TCHAR szFilePath[MAX_PATH + 1]; 
	GetModuleFileName(hinstance, szFilePath, MAX_PATH); 
	CString sCurDir = szFilePath;

	//分离路径和文件名
	int nPos = sCurDir.ReverseFind('\\');
	CString sBinPath = sCurDir.Left(nPos);

	//返回bin文件夹路径
	BSTR path = sBinPath.AllocSysString();
	oBinPath.BuildFromBSTR(path);

	return true;
}